'use strict';
angular.module('angular-normalize-salesforce', []);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceStandardFields', ['id', 'isdeleted', 'name', 'createddate', 'createdbyid', 'lastmodifieddate', 'lastmodifiedbyid', 'systemmodstamp', 'lastactivitydate', 'currencyisocode', 'ownerid', 'recordtypeid']);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceStandardObjects', ["acceptedeventrelation", "account", "accountcontactrole", "accountfeed", "accounthistory", "accountpartner", "accountshare", "activityhistory", "additionalnumber", "aggregateresult", "announcement", "apexclass", "apexcomponent", "apexpage", "apextestqueueitem", "apextestresult", "apextrigger", "appmenuitem", "assignmentrule", "asyncapexjob", "attachedcontentdocument", "attachment", "authsession", "brandtemplate", "businesshours", "businessprocess", "callcenter", "categorynode", "chatteractivity", "clientbrowser", "collaborationgroup", "collaborationgroupfeed", "collaborationgroupmember", "collaborationgroupmemberrequest", "collaborationinvitation", "combinedattachment", "community", "contact", "contactfeed", "contacthistory", "contactshare", "contentdocument", "contentdocumentfeed", "contentdocumenthistory", "contentdocumentlink", "contentversion", "contentversionhistory", "cronjobdetail", "crontrigger", "dashboard", "dashboardcomponent", "dashboardcomponentfeed", "dashboardfeed", "declinedeventrelation", "document", "documentattachmentmap", "domain", "domainsite", "emailservicesaddress", "emailservicesfunction", "emailstatus", "emailtemplate", "entitysubscription", "event", "eventfeed", "eventrelation", "feedcomment", "feeditem", "feedlike", "feedtrackedchange", "fieldpermissions", "fiscalyearsettings", "folder", "forecastshare", "group", "groupmember", "hashtagdefinition", "holiday", "idea", "ideacomment", "loginip", "mailmergetemplate", "mobiledeviceregistrar", "name", "note", "noteandattachment", "objectpermissions", "openactivity", "orgwideemailaddress", "ownedcontentdocument", "period", "permissionset", "permissionsetassignment", "permissionsetlicense", "permissionsetlicenseassign", "processdefinition", "processinstance", "processinstancehistory", "processinstancenode", "processinstancestep", "processinstanceworkitem", "processnode", "profile", "pushtopic", "queuesobject", "recentlyviewed", "recordtype", "report", "reportfeed", "scontrol", "setupentityaccess", "site", "sitefeed", "sitehistory", "staticresource", "task", "taskfeed", "taskpriority", "taskstatus", "topic", "topicassignment", "topicfeed", "undecidedeventrelation", "user", "userfeed", "userlicense", "userpreference", "userprofile", "userrecordaccess", "userrole", "usershare", "vote"]);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceSObjects', {
  account: ['masterrecordid', 'currencyisocode', 'division', 'id', 'accountnumber', 'ownerid', 'recordtypeid', 'site', 'accountsource', 'annualrevenue', 'billingstreet', 'billingcity', 'billingstate', 'billingpostalcode', 'billingcountry', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'description', 'numberofemployees', 'isexcludedfromrealign', 'fax', 'industry', 'jigsawcompanyid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastvieweddate', 'ownership', 'parentid', 'phone', 'photourl', 'rating', 'connectionreceivedid', 'sic', 'sicdesc', 'connectionsentid', 'shippingstreet', 'shippingcity', 'shippingstate', 'shippingpostalcode', 'shippingcountry', 'systemmodstamp', 'tickersymbol', 'type', 'website'],
  contact: ['accountid', 'assistantname', 'assistantphone', 'birthdate', 'masterrecordid', 'currencyisocode', 'division', 'id', 'ownerid', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'department', 'description', 'donotcall', 'email', 'emailbounceddate', 'emailbouncedreason', 'hasoptedoutofemail', 'fax', 'hasoptedoutoffax', 'homephone', 'isemailbounced', 'jigsawcontactid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastcurequestdate', 'lastcuupdatedate', 'lastvieweddate', 'leadsource', 'mailingstreet', 'mailingcity', 'mailingstate', 'mailingpostalcode', 'mailingcountry', 'mobilephone', 'salutation', 'firstname', 'lastname', 'otherstreet', 'othercity', 'otherstate', 'otherpostalcode', 'othercountry', 'otherphone', 'phone', 'photourl', 'connectionreceivedid', 'reportstoid', 'connectionsentid', 'systemmodstamp', 'title'],
  event: ['accountid', 'currencyisocode', 'id', 'isalldayevent', 'isarchived', 'ownerid', 'isrecurrence', 'createdbyid', 'createddate', 'activitydate', 'isdeleted', 'description', 'division', 'durationinminutes', 'enddatetime', 'recurrenceenddateonly', 'groupeventtype', 'ischild', 'isgroupevent', 'lastmodifiedbyid', 'lastmodifieddate', 'location', 'whoid', 'isprivate', 'isvisibleinselfservice', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'showas', 'startdatetime', 'recurrencestartdatetime', 'subject', 'systemmodstamp', 'activitydatetime', 'type'],
  task: ['accountid', 'currencyisocode', 'id', 'isarchived', 'ownerid', 'calldurationinseconds', 'callobject', 'calldisposition', 'calltype', 'isclosed', 'description', 'isrecurrence', 'createdbyid', 'createddate', 'isdeleted', 'division', 'activitydate', 'recurrenceenddateonly', 'lastmodifiedbyid', 'lastmodifieddate', 'whoid', 'priority', 'isvisibleinselfservice', 'connectionreceivedid', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'recurrenceregeneratedtype', 'connectionsentid', 'recurrencestartdateonly', 'status', 'subject', 'systemmodstamp', 'type'],
  user: ['aboutme', 'accountid', 'address', 'alias', 'badgetext', 'callcenterid', 'city', 'communitynickname', 'companyname', 'contactid', 'country', 'countrycode', 'currentstatus', 'defaultcurrencyisocode', 'defaultdivision', 'defaultgroupnotificationfrequency', 'delegatedapproverid', 'department', 'digestfrequency', 'division', 'email', 'emailencodingkey', 'emailpreferencesautobcc', 'emailpreferencesautobccstayintouch', 'emailpreferencesstayintouchreminder', 'employeenumber', 'extension', 'fax', 'federationidentifier', 'firstname', 'forecastenabled', 'fullphotourl', 'isactive', 'ispartner', 'isportalenabled', 'isportalselfregistered', 'isprmsuperuser', 'jigsawimportlimitoverride', 'languagelocalekey', 'lastlogindate', 'lastname', 'lastreferenceddate', 'lastvieweddate', 'latitude', 'localesidkey', 'longitude', 'manager', 'managerid', 'middlename', 'mobilephone', 'name', 'offlinetrialexpirationdate', 'phone', 'portalrole', 'postalcode', 'profileid', 'receivesadmininfoemails', 'receivesinfoemails', 'senderemail', 'sendername', 'signature', 'smallphotourl', 'state', 'statecode', 'stayintouchnote', 'stayintouchsignature', 'stayintouchsubject', 'street', 'suffix', 'timezonesidkey', 'title', 'username', 'userpermissionscallcenterautologin', 'userpermissionschatteranswersuser', 'userpermissionsinteractionuser', 'userpermissionsjigsawprospectinguser', 'userpermissionsknowledgeuser', 'userpermissionsliveagentuser', 'userpermissionsmarketinguser', 'userpermissionsmobileuser', 'userpermissionsofflineuser', 'userpermissionssfcontentuser', 'userpermissionssiteforcecontributoruser', 'userpermissionssiteforcepublisheruser', 'userpermissionssupportuser', 'userpermissionswirelessuser', 'userpermissionsworkdotcomuserfeature', 'userpreferencesactivityreminderspopup', 'userpreferencesapexpagesdevelopermode', 'userpreferencescontentemailasandwhen', 'userpreferencescontentnoemail', 'userpreferencesenableautosubforfeeds', 'userpreferencesdisableallfeedsemail', 'userpreferencesdisableautosubforfeeds', 'userpreferencesdisablebookmarkemail', 'userpreferencesdisablechangecommentemail', 'userpreferencesdisableendorsementemail', 'userpreferencesdisablefilesharenotificationsforapi', 'userpreferencesdisablelatercommentemail', 'userpreferencesdisablelikeemail', 'userpreferencesdisablementionspostemail', 'userpreferencesdisableprofilepostemail', 'userpreferencesdisablesharepostemail', 'userpreferencesdisablefeedbackemail', 'userpreferencesdiscommentafterlikeemail', 'userpreferencesdismentionscommentemail', 'userpreferencesdisablemessageemail', 'userpreferencesdisablerewardemail', 'userpreferencesdisableworkemail', 'userpreferencesdisprofpostcommentemail', 'userpreferenceseventreminderscheckboxdefault', 'userpreferenceshidechatteronboardingsplash', 'userpreferenceshidecsndesktoptask', 'userpreferenceshidecsngetchattermobiletask', 'userpreferenceshidesecondchatteronboardingsplash', 'userpreferenceshides1browserui', 'userpreferencesjigsawlistuser', 'userpreferencesoptoutoftouch', 'userpreferencesprocessassistantcollapsed', 'userpreferencesshowcitytoexternalusers', 'userpreferencesshowcitytoguestusers', 'userpreferencesshowcountrytoexternalusers', 'userpreferencesshowcountrytoguestusers', 'userpreferencesshowemailtoexternalusers', 'userpreferencesshowfaxtoexternalusers', 'userpreferencesshowmanagertoexternalusers', 'userpreferencesshowmobilephonetoexternalusers', 'userpreferencesshowpostalcodetoexternalusers', 'userpreferencesshowpostalcodetoguestusers', 'userpreferencesshowstatetoexternalusers', 'userpreferencesshowstatetoguestusers', 'userpreferencesshowstreetaddresstoexternalusers', 'userpreferencesshowtitletoexternalusers', 'userpreferencesshowtitletoguestusers', 'userpreferencesshowworkphonetoexternalusers', 'userpreferencestaskreminderscheckboxdefault', 'userroleid', 'wirelessemail']
});

'use strict';
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

angular.module('angular-normalize-salesforce').factory('normalizeSalesforce', ["ansSalesforceSObjects", "ansSalesforceStandardObjects", "ansSalesforceStandardFields", function(ansSalesforceSObjects, ansSalesforceStandardObjects, ansSalesforceStandardFields) {
  var NormalizeSalesforce;
  return new (NormalizeSalesforce = (function() {
    function NormalizeSalesforce() {
      this._denormalizeObject = __bind(this._denormalizeObject, this);
      this._denormalizeArray = __bind(this._denormalizeArray, this);
      this._denormalizeString = __bind(this._denormalizeString, this);
      this._normalizeObject = __bind(this._normalizeObject, this);
      this._normalizeArray = __bind(this._normalizeArray, this);
      this.denormalizeObjectName = __bind(this.denormalizeObjectName, this);
      this.denormalize = __bind(this.denormalize, this);
      this.normalize = __bind(this.normalize, this);
      this.standardFields = ansSalesforceStandardFields;
      this.standardObjects = ansSalesforceStandardObjects;
      this.sObjectFields = ansSalesforceSObjects;
    }

    NormalizeSalesforce.prototype.normalize = function(part) {
      var type_name;
      if (_.isNull(part) || _.isUndefined(part)) {
        if (_.isNull(part)) {
          return null;
        } else {
          return void 0;
        }
      }
      type_name = Object.prototype.toString.call(part);
      switch (false) {
        case !_(part).isString():
          return this._normalizeString(part);
        case !_(part).isArray():
          return this._normalizeArray(part);
        case !_(part).isObject():
          return this._normalizeObject(part);
        default:
          throw new Error("Type " + type_name + " not supported. Only String, Array and Object are supported.");
      }
    };

    NormalizeSalesforce.prototype.denormalize = function(part, sObject) {
      var type_name;
      type_name = Object.prototype.toString.call(part);
      switch (false) {
        case !_(part).isString():
          return this._denormalizeString(part, sObject);
        case !_(part).isArray():
          return this._denormalizeArray(part, sObject);
        case !_(part).isObject():
          return this._denormalizeObject(part, sObject);
        default:
          throw new Error("Type " + type_name + " not supported. Only String, Array and Object are supported.");
      }
    };

    NormalizeSalesforce.prototype.denormalizeObjectName = function(name) {
      return this._denormalize(name, this.standardObjects);
    };

    NormalizeSalesforce.prototype._normalizeString = function(string) {
      return string.toLowerCase().replace(/__c$/, '');
    };

    NormalizeSalesforce.prototype._normalizeArray = function(array) {
      return _.map(array, (function(_this) {
        return function(element) {
          return _this.normalize(element);
        };
      })(this));
    };

    NormalizeSalesforce.prototype._normalizeObject = function(object) {
      var normalized;
      normalized = {};
      _.each(object, (function(_this) {
        return function(value, key) {
          if (_(value).isObject() && !_(value).isFunction()) {
            normalized[_this.normalize(key)] = _this.normalize(value);
          } else {
            normalized[_this.normalize(key)] = value;
          }
          return true;
        };
      })(this));
      return normalized;
    };

    NormalizeSalesforce.prototype._denormalize = function(part, avoidList) {
      if (!_(avoidList).contains(part)) {
        return "" + part + "__c";
      } else {
        return part;
      }
    };

    NormalizeSalesforce.prototype._denormalizeString = function(string, sObject) {
      var standardFields;
      sObject = this.normalize(sObject);
      standardFields = this.standardFields;
      if (_(this.sObjectFields).has(sObject)) {
        standardFields = _.uniq(standardFields.concat(this.sObjectFields[sObject]));
      }
      return this._denormalize(string, standardFields);
    };

    NormalizeSalesforce.prototype._denormalizeArray = function(array, sObject) {
      return _.map(array, (function(_this) {
        return function(element) {
          return _this.denormalize(element, sObject);
        };
      })(this));
    };

    NormalizeSalesforce.prototype._denormalizeObject = function(object, sObject) {
      var denormalized;
      denormalized = {};
      _.each(object, (function(_this) {
        return function(value, key) {
          if (_(value).isObject() && !_(value).isFunction()) {
            denormalized[_this.denormalize(key, sObject)] = _this.denormalize(value, sObject);
          } else {
            denormalized[_this.denormalize(key, sObject)] = value;
          }
          return true;
        };
      })(this));
      return denormalized;
    };

    return NormalizeSalesforce;

  })());
}]);

//# sourceMappingURL=data:application/json;base64,