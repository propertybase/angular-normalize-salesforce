'use strict';
angular.module('angular-normalize-salesforce', []);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceStandardFields', ['id', 'isdeleted', 'name', 'createddate', 'createdbyid', 'lastmodifieddate', 'lastmodifiedbyid', 'systemmodstamp', 'lastactivitydate', 'currencyisocode', 'ownerid', 'recordtypeid', 'lastreferenceddate', 'lastvieweddate']);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceStandardObjects', ["acceptedeventrelation", "account", "accountcontactrole", "accountfeed", "accounthistory", "accountpartner", "accountshare", "activityhistory", "additionalnumber", "aggregateresult", "announcement", "apexclass", "apexcomponent", "apexpage", "apextestqueueitem", "apextestresult", "apextrigger", "appmenuitem", "assignmentrule", "asyncapexjob", "attachedcontentdocument", "attachment", "authsession", "brandtemplate", "businesshours", "businessprocess", "callcenter", "categorynode", "chatteractivity", "clientbrowser", "collaborationgroup", "collaborationgroupfeed", "collaborationgroupmember", "collaborationgroupmemberrequest", "collaborationinvitation", "combinedattachment", "community", "contact", "contactfeed", "contacthistory", "contactshare", "contentdocument", "contentdocumentfeed", "contentdocumenthistory", "contentdocumentlink", "contentversion", "contentversionhistory", "cronjobdetail", "crontrigger", "dashboard", "dashboardcomponent", "dashboardcomponentfeed", "dashboardfeed", "declinedeventrelation", "document", "documentattachmentmap", "domain", "domainsite", "emailservicesaddress", "emailservicesfunction", "emailstatus", "emailtemplate", "entitysubscription", "event", "eventfeed", "eventrelation", "feedcomment", "feeditem", "feedlike", "feedtrackedchange", "fieldpermissions", "fiscalyearsettings", "folder", "forecastshare", "group", "groupmember", "hashtagdefinition", "holiday", "idea", "ideacomment", "loginip", "mailmergetemplate", "mobiledeviceregistrar", "name", "note", "noteandattachment", "objectpermissions", "openactivity", "orgwideemailaddress", "ownedcontentdocument", "period", "permissionset", "permissionsetassignment", "permissionsetlicense", "permissionsetlicenseassign", "processdefinition", "processinstance", "processinstancehistory", "processinstancenode", "processinstancestep", "processinstanceworkitem", "processnode", "profile", "pushtopic", "queuesobject", "recentlyviewed", "recordtype", "report", "reportfeed", "scontrol", "setupentityaccess", "site", "sitefeed", "sitehistory", "staticresource", "task", "taskfeed", "taskpriority", "taskstatus", "topic", "topicassignment", "topicfeed", "undecidedeventrelation", "user", "userfeed", "userlicense", "userpreference", "userprofile", "userrecordaccess", "userrole", "usershare", "vote"]);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceSObjects', {
  account: ['masterrecordid', 'currencyisocode', 'division', 'id', 'accountnumber', 'ownerid', 'recordtypeid', 'site', 'accountsource', 'annualrevenue', 'billingstreet', 'billingcity', 'billingstate', 'billingpostalcode', 'billingcountry', 'billinglatitude', 'billinglongitude', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'description', 'numberofemployees', 'isexcludedfromrealign', 'fax', 'industry', 'jigsawcompanyid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastvieweddate', 'ownership', 'parentid', 'phone', 'photourl', 'rating', 'connectionreceivedid', 'sic', 'sicdesc', 'connectionsentid', 'shippingstreet', 'shippingcity', 'shippingstate', 'shippingpostalcode', 'shippingcountry', 'shippinglatitude', 'shippinglongitude', 'systemmodstamp', 'tickersymbol', 'type', 'website'],
  contact: ['accountid', 'assistantname', 'assistantphone', 'birthdate', 'masterrecordid', 'currencyisocode', 'division', 'id', 'ownerid', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'department', 'description', 'donotcall', 'email', 'emailbounceddate', 'emailbouncedreason', 'hasoptedoutofemail', 'fax', 'hasoptedoutoffax', 'homephone', 'isemailbounced', 'jigsawcontactid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastcurequestdate', 'lastcuupdatedate', 'lastvieweddate', 'leadsource', 'mailingstreet', 'mailingcity', 'mailingstate', 'mailingpostalcode', 'mailingcountry', 'mailinglatitude', 'mailinglongitude', 'mobilephone', 'salutation', 'firstname', 'lastname', 'otherstreet', 'othercity', 'otherstate', 'otherpostalcode', 'othercountry', 'otherphone', 'otherlatitude', 'otherlongitude', 'phone', 'photourl', 'connectionreceivedid', 'reportstoid', 'connectionsentid', 'systemmodstamp', 'title'],
  event: ['accountid', 'currencyisocode', 'id', 'isalldayevent', 'isarchived', 'ownerid', 'isrecurrence', 'createdbyid', 'createddate', 'activitydate', 'isdeleted', 'description', 'division', 'durationinminutes', 'enddatetime', 'recurrenceenddateonly', 'groupeventtype', 'ischild', 'isgroupevent', 'lastmodifiedbyid', 'lastmodifieddate', 'location', 'whoid', 'isprivate', 'isvisibleinselfservice', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'showas', 'startdatetime', 'recurrencestartdatetime', 'subject', 'systemmodstamp', 'activitydatetime', 'type'],
  task: ['accountid', 'currencyisocode', 'id', 'isarchived', 'ownerid', 'calldurationinseconds', 'callobject', 'calldisposition', 'calltype', 'isclosed', 'description', 'isrecurrence', 'createdbyid', 'createddate', 'isdeleted', 'division', 'activitydate', 'recurrenceenddateonly', 'lastmodifiedbyid', 'lastmodifieddate', 'whoid', 'priority', 'isvisibleinselfservice', 'connectionreceivedid', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'recurrenceregeneratedtype', 'connectionsentid', 'recurrencestartdateonly', 'status', 'subject', 'systemmodstamp', 'type'],
  user: ['aboutme', 'accountid', 'address', 'alias', 'badgetext', 'callcenterid', 'city', 'communitynickname', 'companyname', 'contactid', 'country', 'countrycode', 'currentstatus', 'defaultcurrencyisocode', 'defaultdivision', 'defaultgroupnotificationfrequency', 'delegatedapproverid', 'department', 'digestfrequency', 'division', 'email', 'emailencodingkey', 'emailpreferencesautobcc', 'emailpreferencesautobccstayintouch', 'emailpreferencesstayintouchreminder', 'employeenumber', 'extension', 'fax', 'federationidentifier', 'firstname', 'forecastenabled', 'fullphotourl', 'isactive', 'ispartner', 'isportalenabled', 'isportalselfregistered', 'isprmsuperuser', 'jigsawimportlimitoverride', 'languagelocalekey', 'lastlogindate', 'lastname', 'lastreferenceddate', 'lastvieweddate', 'latitude', 'localesidkey', 'longitude', 'manager', 'managerid', 'middlename', 'mobilephone', 'name', 'offlinetrialexpirationdate', 'phone', 'portalrole', 'postalcode', 'profileid', 'receivesadmininfoemails', 'receivesinfoemails', 'senderemail', 'sendername', 'signature', 'smallphotourl', 'state', 'statecode', 'stayintouchnote', 'stayintouchsignature', 'stayintouchsubject', 'street', 'suffix', 'timezonesidkey', 'title', 'username', 'userpermissionscallcenterautologin', 'userpermissionschatteranswersuser', 'userpermissionsinteractionuser', 'userpermissionsjigsawprospectinguser', 'userpermissionsknowledgeuser', 'userpermissionsliveagentuser', 'userpermissionsmarketinguser', 'userpermissionsmobileuser', 'userpermissionsofflineuser', 'userpermissionssfcontentuser', 'userpermissionssiteforcecontributoruser', 'userpermissionssiteforcepublisheruser', 'userpermissionssupportuser', 'userpermissionswirelessuser', 'userpermissionsworkdotcomuserfeature', 'userpreferencesactivityreminderspopup', 'userpreferencesapexpagesdevelopermode', 'userpreferencescontentemailasandwhen', 'userpreferencescontentnoemail', 'userpreferencesenableautosubforfeeds', 'userpreferencesdisableallfeedsemail', 'userpreferencesdisableautosubforfeeds', 'userpreferencesdisablebookmarkemail', 'userpreferencesdisablechangecommentemail', 'userpreferencesdisableendorsementemail', 'userpreferencesdisablefilesharenotificationsforapi', 'userpreferencesdisablelatercommentemail', 'userpreferencesdisablelikeemail', 'userpreferencesdisablementionspostemail', 'userpreferencesdisableprofilepostemail', 'userpreferencesdisablesharepostemail', 'userpreferencesdisablefeedbackemail', 'userpreferencesdiscommentafterlikeemail', 'userpreferencesdismentionscommentemail', 'userpreferencesdisablemessageemail', 'userpreferencesdisablerewardemail', 'userpreferencesdisableworkemail', 'userpreferencesdisprofpostcommentemail', 'userpreferenceseventreminderscheckboxdefault', 'userpreferenceshidechatteronboardingsplash', 'userpreferenceshidecsndesktoptask', 'userpreferenceshidecsngetchattermobiletask', 'userpreferenceshidesecondchatteronboardingsplash', 'userpreferenceshides1browserui', 'userpreferencesjigsawlistuser', 'userpreferencesoptoutoftouch', 'userpreferencesprocessassistantcollapsed', 'userpreferencesshowcitytoexternalusers', 'userpreferencesshowcitytoguestusers', 'userpreferencesshowcountrytoexternalusers', 'userpreferencesshowcountrytoguestusers', 'userpreferencesshowemailtoexternalusers', 'userpreferencesshowfaxtoexternalusers', 'userpreferencesshowmanagertoexternalusers', 'userpreferencesshowmobilephonetoexternalusers', 'userpreferencesshowpostalcodetoexternalusers', 'userpreferencesshowpostalcodetoguestusers', 'userpreferencesshowstatetoexternalusers', 'userpreferencesshowstatetoguestusers', 'userpreferencesshowstreetaddresstoexternalusers', 'userpreferencesshowtitletoexternalusers', 'userpreferencesshowtitletoguestusers', 'userpreferencesshowworkphonetoexternalusers', 'userpreferencestaskreminderscheckboxdefault', 'userroleid', 'wirelessemail']
});

'use strict';
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

angular.module('angular-normalize-salesforce').factory('normalizeSalesforce', ["ansSalesforceSObjects", "ansSalesforceStandardObjects", "ansSalesforceStandardFields", function(ansSalesforceSObjects, ansSalesforceStandardObjects, ansSalesforceStandardFields) {
  var NormalizeSalesforce;
  return new (NormalizeSalesforce = (function() {
    function NormalizeSalesforce() {
      this._denormalizeObject = __bind(this._denormalizeObject, this);
      this._denormalizeArray = __bind(this._denormalizeArray, this);
      this._denormalizeString = __bind(this._denormalizeString, this);
      this._normalizeObject = __bind(this._normalizeObject, this);
      this._normalizeArray = __bind(this._normalizeArray, this);
      this.denormalizeObjectName = __bind(this.denormalizeObjectName, this);
      this.denormalize = __bind(this.denormalize, this);
      this.normalize = __bind(this.normalize, this);
      this.standardFields = ansSalesforceStandardFields;
      this.standardObjects = ansSalesforceStandardObjects;
      this.sObjectFields = ansSalesforceSObjects;
    }

    NormalizeSalesforce.prototype.normalize = function(part) {
      var type_name;
      if (_.isNull(part) || _.isUndefined(part)) {
        if (_.isNull(part)) {
          return null;
        } else {
          return void 0;
        }
      }
      type_name = Object.prototype.toString.call(part);
      switch (false) {
        case !_(part).isString():
          return this._normalizeString(part);
        case !_(part).isArray():
          return this._normalizeArray(part);
        case !_(part).isObject():
          return this._normalizeObject(part);
        default:
          throw new Error("Type " + type_name + " not supported. Only String, Array and Object are supported.");
      }
    };

    NormalizeSalesforce.prototype.denormalize = function(part, sObject, map) {
      var type_name;
      if (map == null) {
        map = {};
      }
      type_name = Object.prototype.toString.call(part);
      switch (false) {
        case !_(part).isString():
          return this._denormalizeString(part, sObject, map);
        case !_(part).isArray():
          return this._denormalizeArray(part, sObject);
        case !_(part).isObject():
          return this._denormalizeObject(part, sObject);
        default:
          throw new Error("Type " + type_name + " not supported. Only String, Array and Object are supported.");
      }
    };

    NormalizeSalesforce.prototype.denormalizeObjectName = function(name) {
      return this._denormalize(name, this.standardObjects);
    };

    NormalizeSalesforce.prototype._normalizeString = function(string) {
      return string.toLowerCase().replace(/__c$/, '');
    };

    NormalizeSalesforce.prototype._normalizeArray = function(array) {
      return _.map(array, (function(_this) {
        return function(element) {
          return _this.normalize(element);
        };
      })(this));
    };

    NormalizeSalesforce.prototype._normalizeObject = function(object) {
      var normalized;
      normalized = {};
      _.each(object, (function(_this) {
        return function(value, key) {
          if (_(value).isObject() && !_(value).isFunction()) {
            normalized[_this.normalize(key)] = _this.normalize(value);
          } else {
            normalized[_this.normalize(key)] = value;
          }
          return true;
        };
      })(this));
      return normalized;
    };

    NormalizeSalesforce.prototype._denormalize = function(part, avoidList, prefix) {
      if (prefix == null) {
        prefix = void 0;
      }
      if (!_(avoidList).contains(part)) {
        if (prefix) {
          return "" + prefix + "." + part + "__c";
        } else {
          return "" + part + "__c";
        }
      } else {
        if (prefix) {
          return "" + prefix + "." + part;
        } else {
          return part;
        }
      }
    };

    NormalizeSalesforce.prototype._denormalizeString = function(string, sObject, map) {
      var parentRef, standardFields, stringParts;
      stringParts = string.split('.');
      if (stringParts.length > 1 && _.has(map, stringParts[0])) {
        parentRef = stringParts[0];
        string = stringParts[1];
        sObject = this.normalize(map[parentRef]);
      } else {
        string = stringParts[0];
        sObject = this.normalize(sObject);
      }
      standardFields = this.standardFields;
      if (_(this.sObjectFields).has(sObject)) {
        standardFields = _.uniq(standardFields.concat(this.sObjectFields[sObject]));
      }
      return this._denormalize(string, standardFields, parentRef);
    };

    NormalizeSalesforce.prototype._denormalizeArray = function(array, sObject) {
      return _.map(array, (function(_this) {
        return function(element) {
          return _this.denormalize(element, sObject);
        };
      })(this));
    };

    NormalizeSalesforce.prototype._denormalizeObject = function(object, sObject) {
      var denormalized;
      denormalized = {};
      _.each(object, (function(_this) {
        return function(value, key) {
          if (_(value).isObject() && !_(value).isFunction()) {
            denormalized[_this.denormalize(key, sObject)] = _this.denormalize(value, sObject);
          } else {
            denormalized[_this.denormalize(key, sObject)] = value;
          }
          return true;
        };
      })(this));
      return denormalized;
    };

    return NormalizeSalesforce;

  })());
}]);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UuY29mZmVlIiwic2FsZXNmb3JjZS1zdGFuZGFyZC1maWVsZHMuY29mZmVlIiwic2FsZXNmb3JjZS1zdGFuZGFyZC1vYmplY3RzLmNvZmZlZSIsInNhbGVzZm9yY2Utc29iamVjdHMuY29mZmVlIiwic2FsZXNmb3JjZS1zb2JqZWN0cy5qcyIsIm5vcm1hbGl6ZS1zYWxlc2ZvcmNlLmNvZmZlZSIsIm5vcm1hbGl6ZS1zYWxlc2ZvcmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FDQUE7QUFBQTs7QUNBQTtBQUFBOztBQ0FBO0FBQUE7RUFJRTtFQXNEQTtFQTZEQTtFQTZDQTtFQTRDQTtBQ3pNRjs7QUNQQTtBQUFBOztBQUFBLHdEQUdTLG1CQUFBLEdBQXVCLHlGQUFBO0VBSzlCO0VDSEE7SURJZTtNQUNYO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUNBO01BQ0E7SUFIVzs7SUFBYjtNQU1FO01BQUE7UUFDUztVQ1FMO1FBQ0Y7VUFDRTtRQUNGO01BQ0Y7TURWQTtNQUVBO1FBQUE7VUNZSTtRRFpKO1VDY0k7UURkSjtVQ2dCSTtRRGhCSjtVQUtJO01BTEo7SUFOUzs7SUFMWDtNQXNCRTtNQ2FBO1FEZDJCO01DZ0IzQjtNRGZBO01BRUE7UUFBQTtVQ2lCSTtRRGpCSjtVQ21CSTtRRG5CSjtVQ3FCSTtRRHJCSjtVQUtJO01BTEo7SUFIVzs7SUFyQmI7TUNvREU7SURsQnFCOztJQWxDdkI7TUN3REU7SURqQmdCOztJQXZDbEI7TUM0REU7UUFDRTtVQUNFO1FEbkJTO01BQUE7SUFERTs7SUExQ2pCO01BK0NFO01BQUE7TUFFQTtRQ3NCRTtVRHJCQTtZQUNFO1VDdUJBO1lEckJBO1VDdUJBO1VBQ0E7UUQ1Qlc7TUFBQTtNQytCZjtJRGxDZ0I7O0lBOUNsQjtNQ29GRTtRRDFCOEI7TUM0QjlCO01EM0JBO1FBQ0U7VUM2QkU7UUFDRjtVQUNFO1FBQ0Y7TUFDRjtRRC9CRTtVQ2lDRTtRQUNGO1VBQ0U7UUFDRjtNQUNGO0lEekNZOztJQTFEZDtNQWlFRTtNQUFBO01BQ0E7UUFDRTtRQUNBO1FBQ0E7TUN3Q0Y7UUR0Q0U7UUFDQTtNQ3dDRjtNRHRDQTtNQUNBO1FBQ0U7TUN3Q0Y7TUFDQTtJRHJEa0I7O0lBaEVwQjtNQ3lIRTtRQUNFO1VBQ0U7UUQxQ1M7TUFBQTtJQURJOztJQWhGbkI7TUFxRkU7TUFBQTtNQUVBO1FDNkNFO1VENUNBO1lBQ0U7VUM4Q0E7WUQxQ0E7VUM0Q0E7VUFDQTtRRG5EVztNQUFBO01Dc0RmO0lEekRrQjs7SUM0RHBCOztFQUVGO0FEeEo4QixDQURoQyxDQUFBIiwiZmlsZSI6ImFuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UnLFtdKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJylcbi5jb25zdGFudCAnYW5zU2FsZXNmb3JjZVN0YW5kYXJkRmllbGRzJywgW1xuICAnaWQnXG4gICdpc2RlbGV0ZWQnXG4gICduYW1lJ1xuICAnY3JlYXRlZGRhdGUnXG4gICdjcmVhdGVkYnlpZCdcbiAgJ2xhc3Rtb2RpZmllZGRhdGUnXG4gICdsYXN0bW9kaWZpZWRieWlkJ1xuICAnc3lzdGVtbW9kc3RhbXAnXG4gICdsYXN0YWN0aXZpdHlkYXRlJ1xuICAnY3VycmVuY3lpc29jb2RlJ1xuICAnb3duZXJpZCdcbiAgJ3JlY29yZHR5cGVpZCdcbiAgJ2xhc3RyZWZlcmVuY2VkZGF0ZSdcbiAgJ2xhc3R2aWV3ZWRkYXRlJ1xuXVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJylcbi5jb25zdGFudCAnYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0cycsIFtcbiAgXCJhY2NlcHRlZGV2ZW50cmVsYXRpb25cIixcImFjY291bnRcIixcbiAgXCJhY2NvdW50Y29udGFjdHJvbGVcIixcImFjY291bnRmZWVkXCIsXCJhY2NvdW50aGlzdG9yeVwiLFwiYWNjb3VudHBhcnRuZXJcIixcbiAgXCJhY2NvdW50c2hhcmVcIixcImFjdGl2aXR5aGlzdG9yeVwiLFwiYWRkaXRpb25hbG51bWJlclwiLFwiYWdncmVnYXRlcmVzdWx0XCIsXG4gIFwiYW5ub3VuY2VtZW50XCIsXCJhcGV4Y2xhc3NcIixcImFwZXhjb21wb25lbnRcIixcImFwZXhwYWdlXCIsXG4gIFwiYXBleHRlc3RxdWV1ZWl0ZW1cIixcImFwZXh0ZXN0cmVzdWx0XCIsXCJhcGV4dHJpZ2dlclwiLFwiYXBwbWVudWl0ZW1cIixcbiAgXCJhc3NpZ25tZW50cnVsZVwiLFwiYXN5bmNhcGV4am9iXCIsXCJhdHRhY2hlZGNvbnRlbnRkb2N1bWVudFwiLFwiYXR0YWNobWVudFwiLFxuICBcImF1dGhzZXNzaW9uXCIsXCJicmFuZHRlbXBsYXRlXCIsXCJidXNpbmVzc2hvdXJzXCIsXCJidXNpbmVzc3Byb2Nlc3NcIixcbiAgXCJjYWxsY2VudGVyXCIsXCJjYXRlZ29yeW5vZGVcIixcImNoYXR0ZXJhY3Rpdml0eVwiLFwiY2xpZW50YnJvd3NlclwiLFxuICBcImNvbGxhYm9yYXRpb25ncm91cFwiLFwiY29sbGFib3JhdGlvbmdyb3VwZmVlZFwiLFxuICBcImNvbGxhYm9yYXRpb25ncm91cG1lbWJlclwiLFwiY29sbGFib3JhdGlvbmdyb3VwbWVtYmVycmVxdWVzdFwiLFxuICBcImNvbGxhYm9yYXRpb25pbnZpdGF0aW9uXCIsXCJjb21iaW5lZGF0dGFjaG1lbnRcIixcImNvbW11bml0eVwiLFwiY29udGFjdFwiLFxuICBcImNvbnRhY3RmZWVkXCIsXCJjb250YWN0aGlzdG9yeVwiLFwiY29udGFjdHNoYXJlXCIsXCJjb250ZW50ZG9jdW1lbnRcIixcbiAgXCJjb250ZW50ZG9jdW1lbnRmZWVkXCIsXCJjb250ZW50ZG9jdW1lbnRoaXN0b3J5XCIsXCJjb250ZW50ZG9jdW1lbnRsaW5rXCIsXG4gIFwiY29udGVudHZlcnNpb25cIixcImNvbnRlbnR2ZXJzaW9uaGlzdG9yeVwiLFwiY3JvbmpvYmRldGFpbFwiLFwiY3JvbnRyaWdnZXJcIixcbiAgXCJkYXNoYm9hcmRcIixcImRhc2hib2FyZGNvbXBvbmVudFwiLFwiZGFzaGJvYXJkY29tcG9uZW50ZmVlZFwiLFxuICBcImRhc2hib2FyZGZlZWRcIixcImRlY2xpbmVkZXZlbnRyZWxhdGlvblwiLFwiZG9jdW1lbnRcIixcbiAgXCJkb2N1bWVudGF0dGFjaG1lbnRtYXBcIixcImRvbWFpblwiLFwiZG9tYWluc2l0ZVwiLFwiZW1haWxzZXJ2aWNlc2FkZHJlc3NcIixcbiAgXCJlbWFpbHNlcnZpY2VzZnVuY3Rpb25cIixcImVtYWlsc3RhdHVzXCIsXCJlbWFpbHRlbXBsYXRlXCIsXG4gIFwiZW50aXR5c3Vic2NyaXB0aW9uXCIsXCJldmVudFwiLFwiZXZlbnRmZWVkXCIsXCJldmVudHJlbGF0aW9uXCIsXCJmZWVkY29tbWVudFwiLFxuICBcImZlZWRpdGVtXCIsXCJmZWVkbGlrZVwiLFwiZmVlZHRyYWNrZWRjaGFuZ2VcIixcImZpZWxkcGVybWlzc2lvbnNcIixcbiAgXCJmaXNjYWx5ZWFyc2V0dGluZ3NcIixcImZvbGRlclwiLFwiZm9yZWNhc3RzaGFyZVwiLFwiZ3JvdXBcIixcImdyb3VwbWVtYmVyXCIsXG4gIFwiaGFzaHRhZ2RlZmluaXRpb25cIixcImhvbGlkYXlcIixcImlkZWFcIixcImlkZWFjb21tZW50XCIsXCJsb2dpbmlwXCIsXG4gIFwibWFpbG1lcmdldGVtcGxhdGVcIixcIm1vYmlsZWRldmljZXJlZ2lzdHJhclwiLFwibmFtZVwiLFwibm90ZVwiLFxuICBcIm5vdGVhbmRhdHRhY2htZW50XCIsXCJvYmplY3RwZXJtaXNzaW9uc1wiLFwib3BlbmFjdGl2aXR5XCIsXG4gIFwib3Jnd2lkZWVtYWlsYWRkcmVzc1wiLFwib3duZWRjb250ZW50ZG9jdW1lbnRcIixcInBlcmlvZFwiLFwicGVybWlzc2lvbnNldFwiLFxuICBcInBlcm1pc3Npb25zZXRhc3NpZ25tZW50XCIsXCJwZXJtaXNzaW9uc2V0bGljZW5zZVwiLFxuICBcInBlcm1pc3Npb25zZXRsaWNlbnNlYXNzaWduXCIsXCJwcm9jZXNzZGVmaW5pdGlvblwiLFwicHJvY2Vzc2luc3RhbmNlXCIsXG4gIFwicHJvY2Vzc2luc3RhbmNlaGlzdG9yeVwiLFwicHJvY2Vzc2luc3RhbmNlbm9kZVwiLFwicHJvY2Vzc2luc3RhbmNlc3RlcFwiLFxuICBcInByb2Nlc3NpbnN0YW5jZXdvcmtpdGVtXCIsXCJwcm9jZXNzbm9kZVwiLFwicHJvZmlsZVwiLFwicHVzaHRvcGljXCIsXG4gIFwicXVldWVzb2JqZWN0XCIsXCJyZWNlbnRseXZpZXdlZFwiLFwicmVjb3JkdHlwZVwiLFwicmVwb3J0XCIsXCJyZXBvcnRmZWVkXCIsXG4gIFwic2NvbnRyb2xcIixcInNldHVwZW50aXR5YWNjZXNzXCIsXCJzaXRlXCIsXCJzaXRlZmVlZFwiLFwic2l0ZWhpc3RvcnlcIixcbiAgXCJzdGF0aWNyZXNvdXJjZVwiLFwidGFza1wiLFwidGFza2ZlZWRcIixcInRhc2twcmlvcml0eVwiLFwidGFza3N0YXR1c1wiLFwidG9waWNcIixcbiAgXCJ0b3BpY2Fzc2lnbm1lbnRcIixcInRvcGljZmVlZFwiLFwidW5kZWNpZGVkZXZlbnRyZWxhdGlvblwiLFwidXNlclwiLFxuICBcInVzZXJmZWVkXCIsXCJ1c2VybGljZW5zZVwiLFwidXNlcnByZWZlcmVuY2VcIixcInVzZXJwcm9maWxlXCIsXG4gIFwidXNlcnJlY29yZGFjY2Vzc1wiLFwidXNlcnJvbGVcIixcInVzZXJzaGFyZVwiLFwidm90ZVwiXG5dXG4iLCIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UnKVxuLmNvbnN0YW50ICdhbnNTYWxlc2ZvcmNlU09iamVjdHMnLCB7XG4gIGFjY291bnQ6IFtcbiAgICAnbWFzdGVycmVjb3JkaWQnLFxuICAgICdjdXJyZW5jeWlzb2NvZGUnLFxuICAgICdkaXZpc2lvbicsXG4gICAgJ2lkJyxcbiAgICAnYWNjb3VudG51bWJlcicsXG4gICAgJ293bmVyaWQnLFxuICAgICdyZWNvcmR0eXBlaWQnLFxuICAgICdzaXRlJyxcbiAgICAnYWNjb3VudHNvdXJjZScsXG4gICAgJ2FubnVhbHJldmVudWUnLFxuICAgICdiaWxsaW5nc3RyZWV0JyxcbiAgICAnYmlsbGluZ2NpdHknLFxuICAgICdiaWxsaW5nc3RhdGUnLFxuICAgICdiaWxsaW5ncG9zdGFsY29kZScsXG4gICAgJ2JpbGxpbmdjb3VudHJ5JyxcbiAgICAnYmlsbGluZ2xhdGl0dWRlJyxcbiAgICAnYmlsbGluZ2xvbmdpdHVkZScsXG4gICAgJ2NyZWF0ZWRieWlkJyxcbiAgICAnY3JlYXRlZGRhdGUnLFxuICAgICdqaWdzYXcnLFxuICAgICdpc2RlbGV0ZWQnLFxuICAgICdkZXNjcmlwdGlvbicsXG4gICAgJ251bWJlcm9mZW1wbG95ZWVzJyxcbiAgICAnaXNleGNsdWRlZGZyb21yZWFsaWduJyxcbiAgICAnZmF4JyxcbiAgICAnaW5kdXN0cnknLFxuICAgICdqaWdzYXdjb21wYW55aWQnLFxuICAgICdsYXN0YWN0aXZpdHlkYXRlJyxcbiAgICAnbGFzdG1vZGlmaWVkYnlpZCcsXG4gICAgJ2xhc3Rtb2RpZmllZGRhdGUnLFxuICAgICdsYXN0cmVmZXJlbmNlZGRhdGUnLFxuICAgICdsYXN0dmlld2VkZGF0ZScsXG4gICAgJ293bmVyc2hpcCcsXG4gICAgJ3BhcmVudGlkJyxcbiAgICAncGhvbmUnLFxuICAgICdwaG90b3VybCcsXG4gICAgJ3JhdGluZycsXG4gICAgJ2Nvbm5lY3Rpb25yZWNlaXZlZGlkJyxcbiAgICAnc2ljJyxcbiAgICAnc2ljZGVzYycsXG4gICAgJ2Nvbm5lY3Rpb25zZW50aWQnLFxuICAgICdzaGlwcGluZ3N0cmVldCcsXG4gICAgJ3NoaXBwaW5nY2l0eScsXG4gICAgJ3NoaXBwaW5nc3RhdGUnLFxuICAgICdzaGlwcGluZ3Bvc3RhbGNvZGUnLFxuICAgICdzaGlwcGluZ2NvdW50cnknLFxuICAgICdzaGlwcGluZ2xhdGl0dWRlJyxcbiAgICAnc2hpcHBpbmdsb25naXR1ZGUnLFxuICAgICdzeXN0ZW1tb2RzdGFtcCcsXG4gICAgJ3RpY2tlcnN5bWJvbCcsXG4gICAgJ3R5cGUnLFxuICAgICd3ZWJzaXRlJ1xuICBdXG4gIGNvbnRhY3Q6IFtcbiAgICAnYWNjb3VudGlkJyxcbiAgICAnYXNzaXN0YW50bmFtZScsXG4gICAgJ2Fzc2lzdGFudHBob25lJyxcbiAgICAnYmlydGhkYXRlJyxcbiAgICAnbWFzdGVycmVjb3JkaWQnLFxuICAgICdjdXJyZW5jeWlzb2NvZGUnLFxuICAgICdkaXZpc2lvbicsXG4gICAgJ2lkJyxcbiAgICAnb3duZXJpZCcsXG4gICAgJ2NyZWF0ZWRieWlkJyxcbiAgICAnY3JlYXRlZGRhdGUnLFxuICAgICdqaWdzYXcnLFxuICAgICdpc2RlbGV0ZWQnLFxuICAgICdkZXBhcnRtZW50JyxcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICdkb25vdGNhbGwnLFxuICAgICdlbWFpbCcsXG4gICAgJ2VtYWlsYm91bmNlZGRhdGUnLFxuICAgICdlbWFpbGJvdW5jZWRyZWFzb24nLFxuICAgICdoYXNvcHRlZG91dG9mZW1haWwnLFxuICAgICdmYXgnLFxuICAgICdoYXNvcHRlZG91dG9mZmF4JyxcbiAgICAnaG9tZXBob25lJyxcbiAgICAnaXNlbWFpbGJvdW5jZWQnLFxuICAgICdqaWdzYXdjb250YWN0aWQnLFxuICAgICdsYXN0YWN0aXZpdHlkYXRlJyxcbiAgICAnbGFzdG1vZGlmaWVkYnlpZCcsXG4gICAgJ2xhc3Rtb2RpZmllZGRhdGUnLFxuICAgICdsYXN0cmVmZXJlbmNlZGRhdGUnLFxuICAgICdsYXN0Y3VyZXF1ZXN0ZGF0ZScsXG4gICAgJ2xhc3RjdXVwZGF0ZWRhdGUnLFxuICAgICdsYXN0dmlld2VkZGF0ZScsXG4gICAgJ2xlYWRzb3VyY2UnLFxuICAgICdtYWlsaW5nc3RyZWV0JyxcbiAgICAnbWFpbGluZ2NpdHknLFxuICAgICdtYWlsaW5nc3RhdGUnLFxuICAgICdtYWlsaW5ncG9zdGFsY29kZScsXG4gICAgJ21haWxpbmdjb3VudHJ5JyxcbiAgICAnbWFpbGluZ2xhdGl0dWRlJyxcbiAgICAnbWFpbGluZ2xvbmdpdHVkZScsXG4gICAgJ21vYmlsZXBob25lJyxcbiAgICAnc2FsdXRhdGlvbicsXG4gICAgJ2ZpcnN0bmFtZScsXG4gICAgJ2xhc3RuYW1lJyxcbiAgICAnb3RoZXJzdHJlZXQnLFxuICAgICdvdGhlcmNpdHknLFxuICAgICdvdGhlcnN0YXRlJyxcbiAgICAnb3RoZXJwb3N0YWxjb2RlJyxcbiAgICAnb3RoZXJjb3VudHJ5JyxcbiAgICAnb3RoZXJwaG9uZScsXG4gICAgJ290aGVybGF0aXR1ZGUnLFxuICAgICdvdGhlcmxvbmdpdHVkZSdcbiAgICAncGhvbmUnLFxuICAgICdwaG90b3VybCcsXG4gICAgJ2Nvbm5lY3Rpb25yZWNlaXZlZGlkJyxcbiAgICAncmVwb3J0c3RvaWQnLFxuICAgICdjb25uZWN0aW9uc2VudGlkJyxcbiAgICAnc3lzdGVtbW9kc3RhbXAnLFxuICAgICd0aXRsZSdcbiAgXVxuICBldmVudDogW1xuICAgICdhY2NvdW50aWQnLFxuICAgICdjdXJyZW5jeWlzb2NvZGUnLFxuICAgICdpZCcsXG4gICAgJ2lzYWxsZGF5ZXZlbnQnLFxuICAgICdpc2FyY2hpdmVkJyxcbiAgICAnb3duZXJpZCcsXG4gICAgJ2lzcmVjdXJyZW5jZScsXG4gICAgJ2NyZWF0ZWRieWlkJyxcbiAgICAnY3JlYXRlZGRhdGUnLFxuICAgICdhY3Rpdml0eWRhdGUnLFxuICAgICdpc2RlbGV0ZWQnLFxuICAgICdkZXNjcmlwdGlvbicsXG4gICAgJ2RpdmlzaW9uJyxcbiAgICAnZHVyYXRpb25pbm1pbnV0ZXMnLFxuICAgICdlbmRkYXRldGltZScsXG4gICAgJ3JlY3VycmVuY2VlbmRkYXRlb25seScsXG4gICAgJ2dyb3VwZXZlbnR0eXBlJyxcbiAgICAnaXNjaGlsZCcsXG4gICAgJ2lzZ3JvdXBldmVudCcsXG4gICAgJ2xhc3Rtb2RpZmllZGJ5aWQnLFxuICAgICdsYXN0bW9kaWZpZWRkYXRlJyxcbiAgICAnbG9jYXRpb24nLFxuICAgICd3aG9pZCcsXG4gICAgJ2lzcHJpdmF0ZScsXG4gICAgJ2lzdmlzaWJsZWluc2VsZnNlcnZpY2UnLFxuICAgICdyZWN1cnJlbmNlYWN0aXZpdHlpZCcsXG4gICAgJ3JlY3VycmVuY2VkYXlvZm1vbnRoJyxcbiAgICAncmVjdXJyZW5jZWRheW9md2Vla21hc2snLFxuICAgICdyZWN1cnJlbmNlaW5zdGFuY2UnLFxuICAgICdyZWN1cnJlbmNlaW50ZXJ2YWwnLFxuICAgICdyZWN1cnJlbmNlbW9udGhvZnllYXInLFxuICAgICdyZWN1cnJlbmNldGltZXpvbmVzaWRrZXknLFxuICAgICdyZWN1cnJlbmNldHlwZScsXG4gICAgJ3doYXRpZCcsXG4gICAgJ3JlbWluZGVyZGF0ZXRpbWUnLFxuICAgICdpc3JlbWluZGVyc2V0JyxcbiAgICAnc2hvd2FzJyxcbiAgICAnc3RhcnRkYXRldGltZScsXG4gICAgJ3JlY3VycmVuY2VzdGFydGRhdGV0aW1lJyxcbiAgICAnc3ViamVjdCcsXG4gICAgJ3N5c3RlbW1vZHN0YW1wJyxcbiAgICAnYWN0aXZpdHlkYXRldGltZScsXG4gICAgJ3R5cGUnXG4gIF1cbiAgdGFzazogW1xuICAgICdhY2NvdW50aWQnLFxuICAgICdjdXJyZW5jeWlzb2NvZGUnLFxuICAgICdpZCcsXG4gICAgJ2lzYXJjaGl2ZWQnLFxuICAgICdvd25lcmlkJyxcbiAgICAnY2FsbGR1cmF0aW9uaW5zZWNvbmRzJyxcbiAgICAnY2FsbG9iamVjdCcsXG4gICAgJ2NhbGxkaXNwb3NpdGlvbicsXG4gICAgJ2NhbGx0eXBlJyxcbiAgICAnaXNjbG9zZWQnLFxuICAgICdkZXNjcmlwdGlvbicsXG4gICAgJ2lzcmVjdXJyZW5jZScsXG4gICAgJ2NyZWF0ZWRieWlkJyxcbiAgICAnY3JlYXRlZGRhdGUnLFxuICAgICdpc2RlbGV0ZWQnLFxuICAgICdkaXZpc2lvbicsXG4gICAgJ2FjdGl2aXR5ZGF0ZScsXG4gICAgJ3JlY3VycmVuY2VlbmRkYXRlb25seScsXG4gICAgJ2xhc3Rtb2RpZmllZGJ5aWQnLFxuICAgICdsYXN0bW9kaWZpZWRkYXRlJyxcbiAgICAnd2hvaWQnLFxuICAgICdwcmlvcml0eScsXG4gICAgJ2lzdmlzaWJsZWluc2VsZnNlcnZpY2UnLFxuICAgICdjb25uZWN0aW9ucmVjZWl2ZWRpZCcsXG4gICAgJ3JlY3VycmVuY2VhY3Rpdml0eWlkJyxcbiAgICAncmVjdXJyZW5jZWRheW9mbW9udGgnLFxuICAgICdyZWN1cnJlbmNlZGF5b2Z3ZWVrbWFzaycsXG4gICAgJ3JlY3VycmVuY2VpbnN0YW5jZScsXG4gICAgJ3JlY3VycmVuY2VpbnRlcnZhbCcsXG4gICAgJ3JlY3VycmVuY2Vtb250aG9meWVhcicsXG4gICAgJ3JlY3VycmVuY2V0aW1lem9uZXNpZGtleScsXG4gICAgJ3JlY3VycmVuY2V0eXBlJyxcbiAgICAnd2hhdGlkJyxcbiAgICAncmVtaW5kZXJkYXRldGltZScsXG4gICAgJ2lzcmVtaW5kZXJzZXQnLFxuICAgICdyZWN1cnJlbmNlcmVnZW5lcmF0ZWR0eXBlJyxcbiAgICAnY29ubmVjdGlvbnNlbnRpZCcsXG4gICAgJ3JlY3VycmVuY2VzdGFydGRhdGVvbmx5JyxcbiAgICAnc3RhdHVzJyxcbiAgICAnc3ViamVjdCcsXG4gICAgJ3N5c3RlbW1vZHN0YW1wJyxcbiAgICAndHlwZSdcbiAgXSxcbiAgdXNlcjogW1xuICAgICdhYm91dG1lJyxcbiAgICAnYWNjb3VudGlkJyxcbiAgICAnYWRkcmVzcycsXG4gICAgJ2FsaWFzJyxcbiAgICAnYmFkZ2V0ZXh0JyxcbiAgICAnY2FsbGNlbnRlcmlkJyxcbiAgICAnY2l0eScsXG4gICAgJ2NvbW11bml0eW5pY2tuYW1lJyxcbiAgICAnY29tcGFueW5hbWUnLFxuICAgICdjb250YWN0aWQnLFxuICAgICdjb3VudHJ5JyxcbiAgICAnY291bnRyeWNvZGUnLFxuICAgICdjdXJyZW50c3RhdHVzJyxcbiAgICAnZGVmYXVsdGN1cnJlbmN5aXNvY29kZScsXG4gICAgJ2RlZmF1bHRkaXZpc2lvbicsXG4gICAgJ2RlZmF1bHRncm91cG5vdGlmaWNhdGlvbmZyZXF1ZW5jeScsXG4gICAgJ2RlbGVnYXRlZGFwcHJvdmVyaWQnLFxuICAgICdkZXBhcnRtZW50JyxcbiAgICAnZGlnZXN0ZnJlcXVlbmN5JyxcbiAgICAnZGl2aXNpb24nLFxuICAgICdlbWFpbCcsXG4gICAgJ2VtYWlsZW5jb2RpbmdrZXknLFxuICAgICdlbWFpbHByZWZlcmVuY2VzYXV0b2JjYycsXG4gICAgJ2VtYWlscHJlZmVyZW5jZXNhdXRvYmNjc3RheWludG91Y2gnLFxuICAgICdlbWFpbHByZWZlcmVuY2Vzc3RheWludG91Y2hyZW1pbmRlcicsXG4gICAgJ2VtcGxveWVlbnVtYmVyJyxcbiAgICAnZXh0ZW5zaW9uJyxcbiAgICAnZmF4JyxcbiAgICAnZmVkZXJhdGlvbmlkZW50aWZpZXInLFxuICAgICdmaXJzdG5hbWUnLFxuICAgICdmb3JlY2FzdGVuYWJsZWQnLFxuICAgICdmdWxscGhvdG91cmwnLFxuICAgICdpc2FjdGl2ZScsXG4gICAgJ2lzcGFydG5lcicsXG4gICAgJ2lzcG9ydGFsZW5hYmxlZCcsXG4gICAgJ2lzcG9ydGFsc2VsZnJlZ2lzdGVyZWQnLFxuICAgICdpc3BybXN1cGVydXNlcicsXG4gICAgJ2ppZ3Nhd2ltcG9ydGxpbWl0b3ZlcnJpZGUnLFxuICAgICdsYW5ndWFnZWxvY2FsZWtleScsXG4gICAgJ2xhc3Rsb2dpbmRhdGUnLFxuICAgICdsYXN0bmFtZScsXG4gICAgJ2xhc3RyZWZlcmVuY2VkZGF0ZScsXG4gICAgJ2xhc3R2aWV3ZWRkYXRlJyxcbiAgICAnbGF0aXR1ZGUnLFxuICAgICdsb2NhbGVzaWRrZXknLFxuICAgICdsb25naXR1ZGUnLFxuICAgICdtYW5hZ2VyJyxcbiAgICAnbWFuYWdlcmlkJyxcbiAgICAnbWlkZGxlbmFtZScsXG4gICAgJ21vYmlsZXBob25lJyxcbiAgICAnbmFtZScsXG4gICAgJ29mZmxpbmV0cmlhbGV4cGlyYXRpb25kYXRlJyxcbiAgICAncGhvbmUnLFxuICAgICdwb3J0YWxyb2xlJyxcbiAgICAncG9zdGFsY29kZScsXG4gICAgJ3Byb2ZpbGVpZCcsXG4gICAgJ3JlY2VpdmVzYWRtaW5pbmZvZW1haWxzJyxcbiAgICAncmVjZWl2ZXNpbmZvZW1haWxzJyxcbiAgICAnc2VuZGVyZW1haWwnLFxuICAgICdzZW5kZXJuYW1lJyxcbiAgICAnc2lnbmF0dXJlJyxcbiAgICAnc21hbGxwaG90b3VybCcsXG4gICAgJ3N0YXRlJyxcbiAgICAnc3RhdGVjb2RlJyxcbiAgICAnc3RheWludG91Y2hub3RlJyxcbiAgICAnc3RheWludG91Y2hzaWduYXR1cmUnLFxuICAgICdzdGF5aW50b3VjaHN1YmplY3QnLFxuICAgICdzdHJlZXQnLFxuICAgICdzdWZmaXgnLFxuICAgICd0aW1lem9uZXNpZGtleScsXG4gICAgJ3RpdGxlJyxcbiAgICAndXNlcm5hbWUnLFxuICAgICd1c2VycGVybWlzc2lvbnNjYWxsY2VudGVyYXV0b2xvZ2luJyxcbiAgICAndXNlcnBlcm1pc3Npb25zY2hhdHRlcmFuc3dlcnN1c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25zaW50ZXJhY3Rpb251c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25zamlnc2F3cHJvc3BlY3Rpbmd1c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25za25vd2xlZGdldXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc2xpdmVhZ2VudHVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnNtYXJrZXRpbmd1c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25zbW9iaWxldXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc29mZmxpbmV1c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25zc2Zjb250ZW50dXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc3NpdGVmb3JjZWNvbnRyaWJ1dG9ydXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc3NpdGVmb3JjZXB1Ymxpc2hlcnVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnNzdXBwb3J0dXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc3dpcmVsZXNzdXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc3dvcmtkb3Rjb211c2VyZmVhdHVyZScsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2FjdGl2aXR5cmVtaW5kZXJzcG9wdXAnLFxuICAgICd1c2VycHJlZmVyZW5jZXNhcGV4cGFnZXNkZXZlbG9wZXJtb2RlJyxcbiAgICAndXNlcnByZWZlcmVuY2VzY29udGVudGVtYWlsYXNhbmR3aGVuJyxcbiAgICAndXNlcnByZWZlcmVuY2VzY29udGVudG5vZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNlbmFibGVhdXRvc3ViZm9yZmVlZHMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlYWxsZmVlZHNlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVhdXRvc3ViZm9yZmVlZHMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlYm9va21hcmtlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVjaGFuZ2Vjb21tZW50ZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlZW5kb3JzZW1lbnRlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVmaWxlc2hhcmVub3RpZmljYXRpb25zZm9yYXBpJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWxhdGVyY29tbWVudGVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWxpa2VlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVtZW50aW9uc3Bvc3RlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVwcm9maWxlcG9zdGVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZXNoYXJlcG9zdGVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWZlZWRiYWNrZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNjb21tZW50YWZ0ZXJsaWtlZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNtZW50aW9uc2NvbW1lbnRlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVtZXNzYWdlZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlcmV3YXJkZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxld29ya2VtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzcHJvZnBvc3Rjb21tZW50ZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNldmVudHJlbWluZGVyc2NoZWNrYm94ZGVmYXVsdCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2hpZGVjaGF0dGVyb25ib2FyZGluZ3NwbGFzaCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2hpZGVjc25kZXNrdG9wdGFzaycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2hpZGVjc25nZXRjaGF0dGVybW9iaWxldGFzaycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2hpZGVzZWNvbmRjaGF0dGVyb25ib2FyZGluZ3NwbGFzaCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2hpZGVzMWJyb3dzZXJ1aScsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2ppZ3Nhd2xpc3R1c2VyJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzb3B0b3V0b2Z0b3VjaCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Byb2Nlc3Nhc3Npc3RhbnRjb2xsYXBzZWQnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93Y2l0eXRvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3djaXR5dG9ndWVzdHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd2NvdW50cnl0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93Y291bnRyeXRvZ3Vlc3R1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3dlbWFpbHRvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3dmYXh0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93bWFuYWdlcnRvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3dtb2JpbGVwaG9uZXRvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3dwb3N0YWxjb2RldG9leHRlcm5hbHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd3Bvc3RhbGNvZGV0b2d1ZXN0dXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93c3RhdGV0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93c3RhdGV0b2d1ZXN0dXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93c3RyZWV0YWRkcmVzc3RvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3d0aXRsZXRvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3d0aXRsZXRvZ3Vlc3R1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3d3b3JrcGhvbmV0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXN0YXNrcmVtaW5kZXJzY2hlY2tib3hkZWZhdWx0JyxcbiAgICAndXNlcnJvbGVpZCcsXG4gICAgJ3dpcmVsZXNzZW1haWwnXG4gIF1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJykuY29uc3RhbnQoJ2Fuc1NhbGVzZm9yY2VTT2JqZWN0cycsIHtcbiAgYWNjb3VudDogWydtYXN0ZXJyZWNvcmRpZCcsICdjdXJyZW5jeWlzb2NvZGUnLCAnZGl2aXNpb24nLCAnaWQnLCAnYWNjb3VudG51bWJlcicsICdvd25lcmlkJywgJ3JlY29yZHR5cGVpZCcsICdzaXRlJywgJ2FjY291bnRzb3VyY2UnLCAnYW5udWFscmV2ZW51ZScsICdiaWxsaW5nc3RyZWV0JywgJ2JpbGxpbmdjaXR5JywgJ2JpbGxpbmdzdGF0ZScsICdiaWxsaW5ncG9zdGFsY29kZScsICdiaWxsaW5nY291bnRyeScsICdiaWxsaW5nbGF0aXR1ZGUnLCAnYmlsbGluZ2xvbmdpdHVkZScsICdjcmVhdGVkYnlpZCcsICdjcmVhdGVkZGF0ZScsICdqaWdzYXcnLCAnaXNkZWxldGVkJywgJ2Rlc2NyaXB0aW9uJywgJ251bWJlcm9mZW1wbG95ZWVzJywgJ2lzZXhjbHVkZWRmcm9tcmVhbGlnbicsICdmYXgnLCAnaW5kdXN0cnknLCAnamlnc2F3Y29tcGFueWlkJywgJ2xhc3RhY3Rpdml0eWRhdGUnLCAnbGFzdG1vZGlmaWVkYnlpZCcsICdsYXN0bW9kaWZpZWRkYXRlJywgJ2xhc3RyZWZlcmVuY2VkZGF0ZScsICdsYXN0dmlld2VkZGF0ZScsICdvd25lcnNoaXAnLCAncGFyZW50aWQnLCAncGhvbmUnLCAncGhvdG91cmwnLCAncmF0aW5nJywgJ2Nvbm5lY3Rpb25yZWNlaXZlZGlkJywgJ3NpYycsICdzaWNkZXNjJywgJ2Nvbm5lY3Rpb25zZW50aWQnLCAnc2hpcHBpbmdzdHJlZXQnLCAnc2hpcHBpbmdjaXR5JywgJ3NoaXBwaW5nc3RhdGUnLCAnc2hpcHBpbmdwb3N0YWxjb2RlJywgJ3NoaXBwaW5nY291bnRyeScsICdzaGlwcGluZ2xhdGl0dWRlJywgJ3NoaXBwaW5nbG9uZ2l0dWRlJywgJ3N5c3RlbW1vZHN0YW1wJywgJ3RpY2tlcnN5bWJvbCcsICd0eXBlJywgJ3dlYnNpdGUnXSxcbiAgY29udGFjdDogWydhY2NvdW50aWQnLCAnYXNzaXN0YW50bmFtZScsICdhc3Npc3RhbnRwaG9uZScsICdiaXJ0aGRhdGUnLCAnbWFzdGVycmVjb3JkaWQnLCAnY3VycmVuY3lpc29jb2RlJywgJ2RpdmlzaW9uJywgJ2lkJywgJ293bmVyaWQnLCAnY3JlYXRlZGJ5aWQnLCAnY3JlYXRlZGRhdGUnLCAnamlnc2F3JywgJ2lzZGVsZXRlZCcsICdkZXBhcnRtZW50JywgJ2Rlc2NyaXB0aW9uJywgJ2Rvbm90Y2FsbCcsICdlbWFpbCcsICdlbWFpbGJvdW5jZWRkYXRlJywgJ2VtYWlsYm91bmNlZHJlYXNvbicsICdoYXNvcHRlZG91dG9mZW1haWwnLCAnZmF4JywgJ2hhc29wdGVkb3V0b2ZmYXgnLCAnaG9tZXBob25lJywgJ2lzZW1haWxib3VuY2VkJywgJ2ppZ3Nhd2NvbnRhY3RpZCcsICdsYXN0YWN0aXZpdHlkYXRlJywgJ2xhc3Rtb2RpZmllZGJ5aWQnLCAnbGFzdG1vZGlmaWVkZGF0ZScsICdsYXN0cmVmZXJlbmNlZGRhdGUnLCAnbGFzdGN1cmVxdWVzdGRhdGUnLCAnbGFzdGN1dXBkYXRlZGF0ZScsICdsYXN0dmlld2VkZGF0ZScsICdsZWFkc291cmNlJywgJ21haWxpbmdzdHJlZXQnLCAnbWFpbGluZ2NpdHknLCAnbWFpbGluZ3N0YXRlJywgJ21haWxpbmdwb3N0YWxjb2RlJywgJ21haWxpbmdjb3VudHJ5JywgJ21haWxpbmdsYXRpdHVkZScsICdtYWlsaW5nbG9uZ2l0dWRlJywgJ21vYmlsZXBob25lJywgJ3NhbHV0YXRpb24nLCAnZmlyc3RuYW1lJywgJ2xhc3RuYW1lJywgJ290aGVyc3RyZWV0JywgJ290aGVyY2l0eScsICdvdGhlcnN0YXRlJywgJ290aGVycG9zdGFsY29kZScsICdvdGhlcmNvdW50cnknLCAnb3RoZXJwaG9uZScsICdvdGhlcmxhdGl0dWRlJywgJ290aGVybG9uZ2l0dWRlJywgJ3Bob25lJywgJ3Bob3RvdXJsJywgJ2Nvbm5lY3Rpb25yZWNlaXZlZGlkJywgJ3JlcG9ydHN0b2lkJywgJ2Nvbm5lY3Rpb25zZW50aWQnLCAnc3lzdGVtbW9kc3RhbXAnLCAndGl0bGUnXSxcbiAgZXZlbnQ6IFsnYWNjb3VudGlkJywgJ2N1cnJlbmN5aXNvY29kZScsICdpZCcsICdpc2FsbGRheWV2ZW50JywgJ2lzYXJjaGl2ZWQnLCAnb3duZXJpZCcsICdpc3JlY3VycmVuY2UnLCAnY3JlYXRlZGJ5aWQnLCAnY3JlYXRlZGRhdGUnLCAnYWN0aXZpdHlkYXRlJywgJ2lzZGVsZXRlZCcsICdkZXNjcmlwdGlvbicsICdkaXZpc2lvbicsICdkdXJhdGlvbmlubWludXRlcycsICdlbmRkYXRldGltZScsICdyZWN1cnJlbmNlZW5kZGF0ZW9ubHknLCAnZ3JvdXBldmVudHR5cGUnLCAnaXNjaGlsZCcsICdpc2dyb3VwZXZlbnQnLCAnbGFzdG1vZGlmaWVkYnlpZCcsICdsYXN0bW9kaWZpZWRkYXRlJywgJ2xvY2F0aW9uJywgJ3dob2lkJywgJ2lzcHJpdmF0ZScsICdpc3Zpc2libGVpbnNlbGZzZXJ2aWNlJywgJ3JlY3VycmVuY2VhY3Rpdml0eWlkJywgJ3JlY3VycmVuY2VkYXlvZm1vbnRoJywgJ3JlY3VycmVuY2VkYXlvZndlZWttYXNrJywgJ3JlY3VycmVuY2VpbnN0YW5jZScsICdyZWN1cnJlbmNlaW50ZXJ2YWwnLCAncmVjdXJyZW5jZW1vbnRob2Z5ZWFyJywgJ3JlY3VycmVuY2V0aW1lem9uZXNpZGtleScsICdyZWN1cnJlbmNldHlwZScsICd3aGF0aWQnLCAncmVtaW5kZXJkYXRldGltZScsICdpc3JlbWluZGVyc2V0JywgJ3Nob3dhcycsICdzdGFydGRhdGV0aW1lJywgJ3JlY3VycmVuY2VzdGFydGRhdGV0aW1lJywgJ3N1YmplY3QnLCAnc3lzdGVtbW9kc3RhbXAnLCAnYWN0aXZpdHlkYXRldGltZScsICd0eXBlJ10sXG4gIHRhc2s6IFsnYWNjb3VudGlkJywgJ2N1cnJlbmN5aXNvY29kZScsICdpZCcsICdpc2FyY2hpdmVkJywgJ293bmVyaWQnLCAnY2FsbGR1cmF0aW9uaW5zZWNvbmRzJywgJ2NhbGxvYmplY3QnLCAnY2FsbGRpc3Bvc2l0aW9uJywgJ2NhbGx0eXBlJywgJ2lzY2xvc2VkJywgJ2Rlc2NyaXB0aW9uJywgJ2lzcmVjdXJyZW5jZScsICdjcmVhdGVkYnlpZCcsICdjcmVhdGVkZGF0ZScsICdpc2RlbGV0ZWQnLCAnZGl2aXNpb24nLCAnYWN0aXZpdHlkYXRlJywgJ3JlY3VycmVuY2VlbmRkYXRlb25seScsICdsYXN0bW9kaWZpZWRieWlkJywgJ2xhc3Rtb2RpZmllZGRhdGUnLCAnd2hvaWQnLCAncHJpb3JpdHknLCAnaXN2aXNpYmxlaW5zZWxmc2VydmljZScsICdjb25uZWN0aW9ucmVjZWl2ZWRpZCcsICdyZWN1cnJlbmNlYWN0aXZpdHlpZCcsICdyZWN1cnJlbmNlZGF5b2Ztb250aCcsICdyZWN1cnJlbmNlZGF5b2Z3ZWVrbWFzaycsICdyZWN1cnJlbmNlaW5zdGFuY2UnLCAncmVjdXJyZW5jZWludGVydmFsJywgJ3JlY3VycmVuY2Vtb250aG9meWVhcicsICdyZWN1cnJlbmNldGltZXpvbmVzaWRrZXknLCAncmVjdXJyZW5jZXR5cGUnLCAnd2hhdGlkJywgJ3JlbWluZGVyZGF0ZXRpbWUnLCAnaXNyZW1pbmRlcnNldCcsICdyZWN1cnJlbmNlcmVnZW5lcmF0ZWR0eXBlJywgJ2Nvbm5lY3Rpb25zZW50aWQnLCAncmVjdXJyZW5jZXN0YXJ0ZGF0ZW9ubHknLCAnc3RhdHVzJywgJ3N1YmplY3QnLCAnc3lzdGVtbW9kc3RhbXAnLCAndHlwZSddLFxuICB1c2VyOiBbJ2Fib3V0bWUnLCAnYWNjb3VudGlkJywgJ2FkZHJlc3MnLCAnYWxpYXMnLCAnYmFkZ2V0ZXh0JywgJ2NhbGxjZW50ZXJpZCcsICdjaXR5JywgJ2NvbW11bml0eW5pY2tuYW1lJywgJ2NvbXBhbnluYW1lJywgJ2NvbnRhY3RpZCcsICdjb3VudHJ5JywgJ2NvdW50cnljb2RlJywgJ2N1cnJlbnRzdGF0dXMnLCAnZGVmYXVsdGN1cnJlbmN5aXNvY29kZScsICdkZWZhdWx0ZGl2aXNpb24nLCAnZGVmYXVsdGdyb3Vwbm90aWZpY2F0aW9uZnJlcXVlbmN5JywgJ2RlbGVnYXRlZGFwcHJvdmVyaWQnLCAnZGVwYXJ0bWVudCcsICdkaWdlc3RmcmVxdWVuY3knLCAnZGl2aXNpb24nLCAnZW1haWwnLCAnZW1haWxlbmNvZGluZ2tleScsICdlbWFpbHByZWZlcmVuY2VzYXV0b2JjYycsICdlbWFpbHByZWZlcmVuY2VzYXV0b2JjY3N0YXlpbnRvdWNoJywgJ2VtYWlscHJlZmVyZW5jZXNzdGF5aW50b3VjaHJlbWluZGVyJywgJ2VtcGxveWVlbnVtYmVyJywgJ2V4dGVuc2lvbicsICdmYXgnLCAnZmVkZXJhdGlvbmlkZW50aWZpZXInLCAnZmlyc3RuYW1lJywgJ2ZvcmVjYXN0ZW5hYmxlZCcsICdmdWxscGhvdG91cmwnLCAnaXNhY3RpdmUnLCAnaXNwYXJ0bmVyJywgJ2lzcG9ydGFsZW5hYmxlZCcsICdpc3BvcnRhbHNlbGZyZWdpc3RlcmVkJywgJ2lzcHJtc3VwZXJ1c2VyJywgJ2ppZ3Nhd2ltcG9ydGxpbWl0b3ZlcnJpZGUnLCAnbGFuZ3VhZ2Vsb2NhbGVrZXknLCAnbGFzdGxvZ2luZGF0ZScsICdsYXN0bmFtZScsICdsYXN0cmVmZXJlbmNlZGRhdGUnLCAnbGFzdHZpZXdlZGRhdGUnLCAnbGF0aXR1ZGUnLCAnbG9jYWxlc2lka2V5JywgJ2xvbmdpdHVkZScsICdtYW5hZ2VyJywgJ21hbmFnZXJpZCcsICdtaWRkbGVuYW1lJywgJ21vYmlsZXBob25lJywgJ25hbWUnLCAnb2ZmbGluZXRyaWFsZXhwaXJhdGlvbmRhdGUnLCAncGhvbmUnLCAncG9ydGFscm9sZScsICdwb3N0YWxjb2RlJywgJ3Byb2ZpbGVpZCcsICdyZWNlaXZlc2FkbWluaW5mb2VtYWlscycsICdyZWNlaXZlc2luZm9lbWFpbHMnLCAnc2VuZGVyZW1haWwnLCAnc2VuZGVybmFtZScsICdzaWduYXR1cmUnLCAnc21hbGxwaG90b3VybCcsICdzdGF0ZScsICdzdGF0ZWNvZGUnLCAnc3RheWludG91Y2hub3RlJywgJ3N0YXlpbnRvdWNoc2lnbmF0dXJlJywgJ3N0YXlpbnRvdWNoc3ViamVjdCcsICdzdHJlZXQnLCAnc3VmZml4JywgJ3RpbWV6b25lc2lka2V5JywgJ3RpdGxlJywgJ3VzZXJuYW1lJywgJ3VzZXJwZXJtaXNzaW9uc2NhbGxjZW50ZXJhdXRvbG9naW4nLCAndXNlcnBlcm1pc3Npb25zY2hhdHRlcmFuc3dlcnN1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc2ludGVyYWN0aW9udXNlcicsICd1c2VycGVybWlzc2lvbnNqaWdzYXdwcm9zcGVjdGluZ3VzZXInLCAndXNlcnBlcm1pc3Npb25za25vd2xlZGdldXNlcicsICd1c2VycGVybWlzc2lvbnNsaXZlYWdlbnR1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc21hcmtldGluZ3VzZXInLCAndXNlcnBlcm1pc3Npb25zbW9iaWxldXNlcicsICd1c2VycGVybWlzc2lvbnNvZmZsaW5ldXNlcicsICd1c2VycGVybWlzc2lvbnNzZmNvbnRlbnR1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc3NpdGVmb3JjZWNvbnRyaWJ1dG9ydXNlcicsICd1c2VycGVybWlzc2lvbnNzaXRlZm9yY2VwdWJsaXNoZXJ1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc3N1cHBvcnR1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc3dpcmVsZXNzdXNlcicsICd1c2VycGVybWlzc2lvbnN3b3JrZG90Y29tdXNlcmZlYXR1cmUnLCAndXNlcnByZWZlcmVuY2VzYWN0aXZpdHlyZW1pbmRlcnNwb3B1cCcsICd1c2VycHJlZmVyZW5jZXNhcGV4cGFnZXNkZXZlbG9wZXJtb2RlJywgJ3VzZXJwcmVmZXJlbmNlc2NvbnRlbnRlbWFpbGFzYW5kd2hlbicsICd1c2VycHJlZmVyZW5jZXNjb250ZW50bm9lbWFpbCcsICd1c2VycHJlZmVyZW5jZXNlbmFibGVhdXRvc3ViZm9yZmVlZHMnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWFsbGZlZWRzZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWF1dG9zdWJmb3JmZWVkcycsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlYm9va21hcmtlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlY2hhbmdlY29tbWVudGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVlbmRvcnNlbWVudGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVmaWxlc2hhcmVub3RpZmljYXRpb25zZm9yYXBpJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVsYXRlcmNvbW1lbnRlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlbGlrZWVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVtZW50aW9uc3Bvc3RlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlcHJvZmlsZXBvc3RlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlc2hhcmVwb3N0ZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWZlZWRiYWNrZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzY29tbWVudGFmdGVybGlrZWVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc21lbnRpb25zY29tbWVudGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVtZXNzYWdlZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZXJld2FyZGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGV3b3JrZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzcHJvZnBvc3Rjb21tZW50ZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZXZlbnRyZW1pbmRlcnNjaGVja2JveGRlZmF1bHQnLCAndXNlcnByZWZlcmVuY2VzaGlkZWNoYXR0ZXJvbmJvYXJkaW5nc3BsYXNoJywgJ3VzZXJwcmVmZXJlbmNlc2hpZGVjc25kZXNrdG9wdGFzaycsICd1c2VycHJlZmVyZW5jZXNoaWRlY3NuZ2V0Y2hhdHRlcm1vYmlsZXRhc2snLCAndXNlcnByZWZlcmVuY2VzaGlkZXNlY29uZGNoYXR0ZXJvbmJvYXJkaW5nc3BsYXNoJywgJ3VzZXJwcmVmZXJlbmNlc2hpZGVzMWJyb3dzZXJ1aScsICd1c2VycHJlZmVyZW5jZXNqaWdzYXdsaXN0dXNlcicsICd1c2VycHJlZmVyZW5jZXNvcHRvdXRvZnRvdWNoJywgJ3VzZXJwcmVmZXJlbmNlc3Byb2Nlc3Nhc3Npc3RhbnRjb2xsYXBzZWQnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NpdHl0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NpdHl0b2d1ZXN0dXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NvdW50cnl0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NvdW50cnl0b2d1ZXN0dXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2VtYWlsdG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dmYXh0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd21hbmFnZXJ0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd21vYmlsZXBob25ldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dwb3N0YWxjb2RldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dwb3N0YWxjb2RldG9ndWVzdHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dzdGF0ZXRvZXh0ZXJuYWx1c2VycycsICd1c2VycHJlZmVyZW5jZXNzaG93c3RhdGV0b2d1ZXN0dXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd3N0cmVldGFkZHJlc3N0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd3RpdGxldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3d0aXRsZXRvZ3Vlc3R1c2VycycsICd1c2VycHJlZmVyZW5jZXNzaG93d29ya3Bob25ldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Rhc2tyZW1pbmRlcnNjaGVja2JveGRlZmF1bHQnLCAndXNlcnJvbGVpZCcsICd3aXJlbGVzc2VtYWlsJ11cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJylcbi5mYWN0b3J5ICdub3JtYWxpemVTYWxlc2ZvcmNlJywgKFxuICBhbnNTYWxlc2ZvcmNlU09iamVjdHMsXG4gIGFuc1NhbGVzZm9yY2VTdGFuZGFyZE9iamVjdHMsXG4gIGFuc1NhbGVzZm9yY2VTdGFuZGFyZEZpZWxkc1xuKSAtPlxuICBuZXcgY2xhc3MgTm9ybWFsaXplU2FsZXNmb3JjZVxuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgQHN0YW5kYXJkRmllbGRzID0gYW5zU2FsZXNmb3JjZVN0YW5kYXJkRmllbGRzXG4gICAgICBAc3RhbmRhcmRPYmplY3RzID0gYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0c1xuICAgICAgQHNPYmplY3RGaWVsZHMgPSBhbnNTYWxlc2ZvcmNlU09iamVjdHNcblxuICAgIG5vcm1hbGl6ZTogKHBhcnQpID0+XG4gICAgICBpZiBfLmlzTnVsbChwYXJ0KSB8fCBfLmlzVW5kZWZpbmVkKHBhcnQpXG4gICAgICAgIHJldHVybiBpZiBfLmlzTnVsbChwYXJ0KSB0aGVuIG51bGwgZWxzZSB1bmRlZmluZWRcblxuICAgICAgdHlwZV9uYW1lID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhcnQpXG5cbiAgICAgIHN3aXRjaFxuICAgICAgICB3aGVuIF8ocGFydCkuaXNTdHJpbmcoKSB0aGVuIEBfbm9ybWFsaXplU3RyaW5nKHBhcnQpXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc0FycmF5KCkgIHRoZW4gQF9ub3JtYWxpemVBcnJheShwYXJ0KVxuICAgICAgICB3aGVuIF8ocGFydCkuaXNPYmplY3QoKSB0aGVuIEBfbm9ybWFsaXplT2JqZWN0KHBhcnQpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIlR5cGUgI3t0eXBlX25hbWV9IG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgICAgICBPbmx5IFN0cmluZywgQXJyYXkgYW5kIE9iamVjdCBhcmUgc3VwcG9ydGVkLlwiXG4gICAgICAgICAgKVxuXG4gICAgZGVub3JtYWxpemU6IChwYXJ0LCBzT2JqZWN0LCBtYXA9e30pID0+XG4gICAgICB0eXBlX25hbWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocGFydClcblxuICAgICAgc3dpdGNoXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc1N0cmluZygpIHRoZW4gQF9kZW5vcm1hbGl6ZVN0cmluZyhwYXJ0LCBzT2JqZWN0LCBtYXApXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc0FycmF5KCkgIHRoZW4gQF9kZW5vcm1hbGl6ZUFycmF5KHBhcnQsIHNPYmplY3QpXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc09iamVjdCgpIHRoZW4gQF9kZW5vcm1hbGl6ZU9iamVjdChwYXJ0LCBzT2JqZWN0KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJUeXBlICN7dHlwZV9uYW1lfSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgICAgT25seSBTdHJpbmcsIEFycmF5IGFuZCBPYmplY3QgYXJlIHN1cHBvcnRlZC5cIlxuICAgICAgICAgIClcblxuICAgIGRlbm9ybWFsaXplT2JqZWN0TmFtZTogKG5hbWUpID0+XG4gICAgICBAX2Rlbm9ybWFsaXplIG5hbWUsIEBzdGFuZGFyZE9iamVjdHNcblxuICAgICMgUFJJVkFURSAtLS0tLS0tLS0tXG5cbiAgICBfbm9ybWFsaXplU3RyaW5nOiAoc3RyaW5nKSAtPlxuICAgICAgc3RyaW5nLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvX19jJC8sICcnKVxuXG4gICAgX25vcm1hbGl6ZUFycmF5OiAoYXJyYXkpID0+XG4gICAgICBfLm1hcCBhcnJheSwgKGVsZW1lbnQpID0+XG4gICAgICAgIEBub3JtYWxpemUoZWxlbWVudClcblxuICAgIF9ub3JtYWxpemVPYmplY3Q6IChvYmplY3QpID0+XG4gICAgICBub3JtYWxpemVkID0ge31cblxuICAgICAgXy5lYWNoIG9iamVjdCwgKHZhbHVlLCBrZXkpID0+XG4gICAgICAgIGlmIF8odmFsdWUpLmlzT2JqZWN0KCkgJiYgIV8odmFsdWUpLmlzRnVuY3Rpb24oKVxuICAgICAgICAgIG5vcm1hbGl6ZWRbQG5vcm1hbGl6ZShrZXkpXSA9IEBub3JtYWxpemUodmFsdWUpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBub3JtYWxpemVkW0Bub3JtYWxpemUoa2V5KV0gPSB2YWx1ZVxuICAgICAgICB0cnVlXG5cbiAgICAgIG5vcm1hbGl6ZWRcblxuICAgIF9kZW5vcm1hbGl6ZTogKHBhcnQsIGF2b2lkTGlzdCwgcHJlZml4PXVuZGVmaW5lZCkgLT5cbiAgICAgIHVubGVzcyBfKGF2b2lkTGlzdCkuY29udGFpbnMocGFydClcbiAgICAgICAgaWYgcHJlZml4IHRoZW4gXCIje3ByZWZpeH0uI3twYXJ0fV9fY1wiIGVsc2UgXCIje3BhcnR9X19jXCJcbiAgICAgIGVsc2VcbiAgICAgICAgaWYgcHJlZml4IHRoZW4gXCIje3ByZWZpeH0uI3twYXJ0fVwiIGVsc2UgcGFydFxuXG4gICAgX2Rlbm9ybWFsaXplU3RyaW5nOiAoc3RyaW5nLCBzT2JqZWN0LCBtYXApID0+XG4gICAgICBzdHJpbmdQYXJ0cyA9IHN0cmluZy5zcGxpdCgnLicpXG4gICAgICBpZiBzdHJpbmdQYXJ0cy5sZW5ndGggPiAxICYmIF8uaGFzKG1hcCxzdHJpbmdQYXJ0c1swXSlcbiAgICAgICAgcGFyZW50UmVmID0gc3RyaW5nUGFydHNbMF1cbiAgICAgICAgc3RyaW5nID0gc3RyaW5nUGFydHNbMV1cbiAgICAgICAgc09iamVjdCA9IEBub3JtYWxpemUobWFwW3BhcmVudFJlZl0pXG4gICAgICBlbHNlXG4gICAgICAgIHN0cmluZyA9IHN0cmluZ1BhcnRzWzBdXG4gICAgICAgIHNPYmplY3QgPSBAbm9ybWFsaXplKHNPYmplY3QpXG5cbiAgICAgIHN0YW5kYXJkRmllbGRzID0gQHN0YW5kYXJkRmllbGRzXG4gICAgICBpZiBfKEBzT2JqZWN0RmllbGRzKS5oYXMoc09iamVjdClcbiAgICAgICAgc3RhbmRhcmRGaWVsZHMgPSBfLnVuaXEoc3RhbmRhcmRGaWVsZHMuY29uY2F0KEBzT2JqZWN0RmllbGRzW3NPYmplY3RdKSlcblxuICAgICAgQF9kZW5vcm1hbGl6ZSBzdHJpbmcsIHN0YW5kYXJkRmllbGRzLCBwYXJlbnRSZWZcblxuICAgIF9kZW5vcm1hbGl6ZUFycmF5OiAoYXJyYXksIHNPYmplY3QpID0+XG4gICAgICBfLm1hcCBhcnJheSwgKGVsZW1lbnQpID0+XG4gICAgICAgIEBkZW5vcm1hbGl6ZShlbGVtZW50LCBzT2JqZWN0KVxuXG4gICAgX2Rlbm9ybWFsaXplT2JqZWN0OiAob2JqZWN0LCBzT2JqZWN0KSA9PlxuICAgICAgZGVub3JtYWxpemVkID0ge31cblxuICAgICAgXy5lYWNoIG9iamVjdCwgKHZhbHVlLCBrZXkpID0+XG4gICAgICAgIGlmIF8odmFsdWUpLmlzT2JqZWN0KCkgJiYgIV8odmFsdWUpLmlzRnVuY3Rpb24oKVxuICAgICAgICAgIGRlbm9ybWFsaXplZFtAZGVub3JtYWxpemUoa2V5LCBzT2JqZWN0KV0gPSBAZGVub3JtYWxpemUoXG4gICAgICAgICAgICB2YWx1ZSwgc09iamVjdFxuICAgICAgICAgIClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGRlbm9ybWFsaXplZFtAZGVub3JtYWxpemUoa2V5LCBzT2JqZWN0KV0gPSB2YWx1ZVxuICAgICAgICB0cnVlXG5cbiAgICAgIGRlbm9ybWFsaXplZFxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIF9fYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07XG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJykuZmFjdG9yeSgnbm9ybWFsaXplU2FsZXNmb3JjZScsIGZ1bmN0aW9uKGFuc1NhbGVzZm9yY2VTT2JqZWN0cywgYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0cywgYW5zU2FsZXNmb3JjZVN0YW5kYXJkRmllbGRzKSB7XG4gIHZhciBOb3JtYWxpemVTYWxlc2ZvcmNlO1xuICByZXR1cm4gbmV3IChOb3JtYWxpemVTYWxlc2ZvcmNlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIE5vcm1hbGl6ZVNhbGVzZm9yY2UoKSB7XG4gICAgICB0aGlzLl9kZW5vcm1hbGl6ZU9iamVjdCA9IF9fYmluZCh0aGlzLl9kZW5vcm1hbGl6ZU9iamVjdCwgdGhpcyk7XG4gICAgICB0aGlzLl9kZW5vcm1hbGl6ZUFycmF5ID0gX19iaW5kKHRoaXMuX2Rlbm9ybWFsaXplQXJyYXksIHRoaXMpO1xuICAgICAgdGhpcy5fZGVub3JtYWxpemVTdHJpbmcgPSBfX2JpbmQodGhpcy5fZGVub3JtYWxpemVTdHJpbmcsIHRoaXMpO1xuICAgICAgdGhpcy5fbm9ybWFsaXplT2JqZWN0ID0gX19iaW5kKHRoaXMuX25vcm1hbGl6ZU9iamVjdCwgdGhpcyk7XG4gICAgICB0aGlzLl9ub3JtYWxpemVBcnJheSA9IF9fYmluZCh0aGlzLl9ub3JtYWxpemVBcnJheSwgdGhpcyk7XG4gICAgICB0aGlzLmRlbm9ybWFsaXplT2JqZWN0TmFtZSA9IF9fYmluZCh0aGlzLmRlbm9ybWFsaXplT2JqZWN0TmFtZSwgdGhpcyk7XG4gICAgICB0aGlzLmRlbm9ybWFsaXplID0gX19iaW5kKHRoaXMuZGVub3JtYWxpemUsIHRoaXMpO1xuICAgICAgdGhpcy5ub3JtYWxpemUgPSBfX2JpbmQodGhpcy5ub3JtYWxpemUsIHRoaXMpO1xuICAgICAgdGhpcy5zdGFuZGFyZEZpZWxkcyA9IGFuc1NhbGVzZm9yY2VTdGFuZGFyZEZpZWxkcztcbiAgICAgIHRoaXMuc3RhbmRhcmRPYmplY3RzID0gYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0cztcbiAgICAgIHRoaXMuc09iamVjdEZpZWxkcyA9IGFuc1NhbGVzZm9yY2VTT2JqZWN0cztcbiAgICB9XG5cbiAgICBOb3JtYWxpemVTYWxlc2ZvcmNlLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICB2YXIgdHlwZV9uYW1lO1xuICAgICAgaWYgKF8uaXNOdWxsKHBhcnQpIHx8IF8uaXNVbmRlZmluZWQocGFydCkpIHtcbiAgICAgICAgaWYgKF8uaXNOdWxsKHBhcnQpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHlwZV9uYW1lID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhcnQpO1xuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzU3RyaW5nKCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZVN0cmluZyhwYXJ0KTtcbiAgICAgICAgY2FzZSAhXyhwYXJ0KS5pc0FycmF5KCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZUFycmF5KHBhcnQpO1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzT2JqZWN0KCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZU9iamVjdChwYXJ0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlIFwiICsgdHlwZV9uYW1lICsgXCIgbm90IHN1cHBvcnRlZC4gT25seSBTdHJpbmcsIEFycmF5IGFuZCBPYmplY3QgYXJlIHN1cHBvcnRlZC5cIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLmRlbm9ybWFsaXplID0gZnVuY3Rpb24ocGFydCwgc09iamVjdCwgbWFwKSB7XG4gICAgICB2YXIgdHlwZV9uYW1lO1xuICAgICAgaWYgKG1hcCA9PSBudWxsKSB7XG4gICAgICAgIG1hcCA9IHt9O1xuICAgICAgfVxuICAgICAgdHlwZV9uYW1lID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhcnQpO1xuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzU3RyaW5nKCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9ybWFsaXplU3RyaW5nKHBhcnQsIHNPYmplY3QsIG1hcCk7XG4gICAgICAgIGNhc2UgIV8ocGFydCkuaXNBcnJheSgpOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9kZW5vcm1hbGl6ZUFycmF5KHBhcnQsIHNPYmplY3QpO1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzT2JqZWN0KCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9ybWFsaXplT2JqZWN0KHBhcnQsIHNPYmplY3QpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR5cGUgXCIgKyB0eXBlX25hbWUgKyBcIiBub3Qgc3VwcG9ydGVkLiBPbmx5IFN0cmluZywgQXJyYXkgYW5kIE9iamVjdCBhcmUgc3VwcG9ydGVkLlwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTm9ybWFsaXplU2FsZXNmb3JjZS5wcm90b3R5cGUuZGVub3JtYWxpemVPYmplY3ROYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9ybWFsaXplKG5hbWUsIHRoaXMuc3RhbmRhcmRPYmplY3RzKTtcbiAgICB9O1xuXG4gICAgTm9ybWFsaXplU2FsZXNmb3JjZS5wcm90b3R5cGUuX25vcm1hbGl6ZVN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL19fYyQvLCAnJyk7XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLl9ub3JtYWxpemVBcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICByZXR1cm4gXy5tYXAoYXJyYXksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5ub3JtYWxpemUoZWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLl9ub3JtYWxpemVPYmplY3QgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBub3JtYWxpemVkO1xuICAgICAgbm9ybWFsaXplZCA9IHt9O1xuICAgICAgXy5lYWNoKG9iamVjdCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKF8odmFsdWUpLmlzT2JqZWN0KCkgJiYgIV8odmFsdWUpLmlzRnVuY3Rpb24oKSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFtfdGhpcy5ub3JtYWxpemUoa2V5KV0gPSBfdGhpcy5ub3JtYWxpemUodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVkW190aGlzLm5vcm1hbGl6ZShrZXkpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH07XG5cbiAgICBOb3JtYWxpemVTYWxlc2ZvcmNlLnByb3RvdHlwZS5fZGVub3JtYWxpemUgPSBmdW5jdGlvbihwYXJ0LCBhdm9pZExpc3QsIHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCA9PSBudWxsKSB7XG4gICAgICAgIHByZWZpeCA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmICghXyhhdm9pZExpc3QpLmNvbnRhaW5zKHBhcnQpKSB7XG4gICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIFwiLlwiICsgcGFydCArIFwiX19jXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCIgKyBwYXJ0ICsgXCJfX2NcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgIHJldHVybiBcIlwiICsgcHJlZml4ICsgXCIuXCIgKyBwYXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLl9kZW5vcm1hbGl6ZVN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZywgc09iamVjdCwgbWFwKSB7XG4gICAgICB2YXIgcGFyZW50UmVmLCBzdGFuZGFyZEZpZWxkcywgc3RyaW5nUGFydHM7XG4gICAgICBzdHJpbmdQYXJ0cyA9IHN0cmluZy5zcGxpdCgnLicpO1xuICAgICAgaWYgKHN0cmluZ1BhcnRzLmxlbmd0aCA+IDEgJiYgXy5oYXMobWFwLCBzdHJpbmdQYXJ0c1swXSkpIHtcbiAgICAgICAgcGFyZW50UmVmID0gc3RyaW5nUGFydHNbMF07XG4gICAgICAgIHN0cmluZyA9IHN0cmluZ1BhcnRzWzFdO1xuICAgICAgICBzT2JqZWN0ID0gdGhpcy5ub3JtYWxpemUobWFwW3BhcmVudFJlZl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nUGFydHNbMF07XG4gICAgICAgIHNPYmplY3QgPSB0aGlzLm5vcm1hbGl6ZShzT2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHN0YW5kYXJkRmllbGRzID0gdGhpcy5zdGFuZGFyZEZpZWxkcztcbiAgICAgIGlmIChfKHRoaXMuc09iamVjdEZpZWxkcykuaGFzKHNPYmplY3QpKSB7XG4gICAgICAgIHN0YW5kYXJkRmllbGRzID0gXy51bmlxKHN0YW5kYXJkRmllbGRzLmNvbmNhdCh0aGlzLnNPYmplY3RGaWVsZHNbc09iamVjdF0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9kZW5vcm1hbGl6ZShzdHJpbmcsIHN0YW5kYXJkRmllbGRzLCBwYXJlbnRSZWYpO1xuICAgIH07XG5cbiAgICBOb3JtYWxpemVTYWxlc2ZvcmNlLnByb3RvdHlwZS5fZGVub3JtYWxpemVBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCBzT2JqZWN0KSB7XG4gICAgICByZXR1cm4gXy5tYXAoYXJyYXksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5kZW5vcm1hbGl6ZShlbGVtZW50LCBzT2JqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgTm9ybWFsaXplU2FsZXNmb3JjZS5wcm90b3R5cGUuX2Rlbm9ybWFsaXplT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBzT2JqZWN0KSB7XG4gICAgICB2YXIgZGVub3JtYWxpemVkO1xuICAgICAgZGVub3JtYWxpemVkID0ge307XG4gICAgICBfLmVhY2gob2JqZWN0LCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBpZiAoXyh2YWx1ZSkuaXNPYmplY3QoKSAmJiAhXyh2YWx1ZSkuaXNGdW5jdGlvbigpKSB7XG4gICAgICAgICAgICBkZW5vcm1hbGl6ZWRbX3RoaXMuZGVub3JtYWxpemUoa2V5LCBzT2JqZWN0KV0gPSBfdGhpcy5kZW5vcm1hbGl6ZSh2YWx1ZSwgc09iamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbm9ybWFsaXplZFtfdGhpcy5kZW5vcm1hbGl6ZShrZXksIHNPYmplY3QpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHJldHVybiBkZW5vcm1hbGl6ZWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBOb3JtYWxpemVTYWxlc2ZvcmNlO1xuXG4gIH0pKCkpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=