'use strict';
angular.module('angular-normalize-salesforce', []);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceStandardFields', ['id', 'isdeleted', 'name', 'createddate', 'createdbyid', 'lastmodifieddate', 'lastmodifiedbyid', 'systemmodstamp', 'lastactivitydate', 'currencyisocode', 'ownerid', 'recordtypeid', 'lastreferenceddate', 'lastvieweddate']);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceStandardObjects', ["acceptedeventrelation", "account", "accountcontactrole", "accountfeed", "accounthistory", "accountpartner", "accountshare", "activityhistory", "additionalnumber", "aggregateresult", "announcement", "apexclass", "apexcomponent", "apexpage", "apextestqueueitem", "apextestresult", "apextrigger", "appmenuitem", "assignmentrule", "asyncapexjob", "attachedcontentdocument", "attachment", "authsession", "brandtemplate", "businesshours", "businessprocess", "callcenter", "categorynode", "chatteractivity", "clientbrowser", "collaborationgroup", "collaborationgroupfeed", "collaborationgroupmember", "collaborationgroupmemberrequest", "collaborationinvitation", "combinedattachment", "community", "contact", "contactfeed", "contacthistory", "contactshare", "contentdocument", "contentdocumentfeed", "contentdocumenthistory", "contentdocumentlink", "contentversion", "contentversionhistory", "cronjobdetail", "crontrigger", "dashboard", "dashboardcomponent", "dashboardcomponentfeed", "dashboardfeed", "declinedeventrelation", "document", "documentattachmentmap", "domain", "domainsite", "emailservicesaddress", "emailservicesfunction", "emailstatus", "emailtemplate", "entitysubscription", "event", "eventfeed", "eventrelation", "feedcomment", "feeditem", "feedlike", "feedtrackedchange", "fieldpermissions", "fiscalyearsettings", "folder", "forecastshare", "group", "groupmember", "hashtagdefinition", "holiday", "idea", "ideacomment", "loginip", "mailmergetemplate", "mobiledeviceregistrar", "name", "note", "noteandattachment", "objectpermissions", "openactivity", "orgwideemailaddress", "ownedcontentdocument", "period", "permissionset", "permissionsetassignment", "permissionsetlicense", "permissionsetlicenseassign", "processdefinition", "processinstance", "processinstancehistory", "processinstancenode", "processinstancestep", "processinstanceworkitem", "processnode", "profile", "pushtopic", "queuesobject", "recentlyviewed", "recordtype", "report", "reportfeed", "scontrol", "setupentityaccess", "site", "sitefeed", "sitehistory", "staticresource", "task", "taskfeed", "taskpriority", "taskstatus", "topic", "topicassignment", "topicfeed", "undecidedeventrelation", "user", "userfeed", "userlicense", "userpreference", "userprofile", "userrecordaccess", "userrole", "usershare", "vote"]);

'use strict';
angular.module('angular-normalize-salesforce').constant('ansSalesforceSObjects', {
  account: ['masterrecordid', 'currencyisocode', 'division', 'id', 'accountnumber', 'ownerid', 'recordtypeid', 'site', 'accountsource', 'annualrevenue', 'billingstreet', 'billingcity', 'billingstate', 'billingpostalcode', 'billingcountry', 'billinglatitude', 'billinglongitude', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'description', 'numberofemployees', 'isexcludedfromrealign', 'fax', 'industry', 'jigsawcompanyid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastvieweddate', 'ownership', 'parentid', 'phone', 'photourl', 'rating', 'connectionreceivedid', 'sic', 'sicdesc', 'connectionsentid', 'shippingstreet', 'shippingcity', 'shippingstate', 'shippingpostalcode', 'shippingcountry', 'shippinglatitude', 'shippinglongitude', 'systemmodstamp', 'tickersymbol', 'type', 'website'],
  attachment: ['body', 'bodylength', 'connectionreceivedid', 'connectionsentid', 'contenttype', 'description', 'ispartnershared', 'isprivate', 'parentid'],
  contact: ['accountid', 'assistantname', 'assistantphone', 'birthdate', 'masterrecordid', 'currencyisocode', 'division', 'id', 'ownerid', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'department', 'description', 'donotcall', 'email', 'emailbounceddate', 'emailbouncedreason', 'hasoptedoutofemail', 'fax', 'hasoptedoutoffax', 'homephone', 'isemailbounced', 'jigsawcontactid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastcurequestdate', 'lastcuupdatedate', 'lastvieweddate', 'leadsource', 'mailingstreet', 'mailingcity', 'mailingstate', 'mailingpostalcode', 'mailingcountry', 'mailinglatitude', 'mailinglongitude', 'mobilephone', 'salutation', 'firstname', 'lastname', 'otherstreet', 'othercity', 'otherstate', 'otherpostalcode', 'othercountry', 'otherphone', 'otherlatitude', 'otherlongitude', 'phone', 'photourl', 'connectionreceivedid', 'reportstoid', 'connectionsentid', 'systemmodstamp', 'title'],
  event: ['accountid', 'currencyisocode', 'id', 'isalldayevent', 'isarchived', 'ownerid', 'isrecurrence', 'createdbyid', 'createddate', 'activitydate', 'isdeleted', 'description', 'division', 'durationinminutes', 'enddatetime', 'recurrenceenddateonly', 'groupeventtype', 'ischild', 'isgroupevent', 'lastmodifiedbyid', 'lastmodifieddate', 'location', 'whoid', 'isprivate', 'isvisibleinselfservice', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'showas', 'startdatetime', 'recurrencestartdatetime', 'subject', 'systemmodstamp', 'activitydatetime', 'type'],
  task: ['accountid', 'currencyisocode', 'id', 'isarchived', 'ownerid', 'calldurationinseconds', 'callobject', 'calldisposition', 'calltype', 'isclosed', 'description', 'isrecurrence', 'createdbyid', 'createddate', 'isdeleted', 'division', 'activitydate', 'recurrenceenddateonly', 'lastmodifiedbyid', 'lastmodifieddate', 'whoid', 'priority', 'isvisibleinselfservice', 'connectionreceivedid', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'recurrenceregeneratedtype', 'connectionsentid', 'recurrencestartdateonly', 'status', 'subject', 'systemmodstamp', 'type'],
  user: ['aboutme', 'accountid', 'address', 'alias', 'badgetext', 'callcenterid', 'city', 'communitynickname', 'companyname', 'contactid', 'country', 'countrycode', 'currentstatus', 'defaultcurrencyisocode', 'defaultdivision', 'defaultgroupnotificationfrequency', 'delegatedapproverid', 'department', 'digestfrequency', 'division', 'email', 'emailencodingkey', 'emailpreferencesautobcc', 'emailpreferencesautobccstayintouch', 'emailpreferencesstayintouchreminder', 'employeenumber', 'extension', 'fax', 'federationidentifier', 'firstname', 'forecastenabled', 'fullphotourl', 'isactive', 'ispartner', 'isportalenabled', 'isportalselfregistered', 'isprmsuperuser', 'jigsawimportlimitoverride', 'languagelocalekey', 'lastlogindate', 'lastpasswordchangedate', 'lastname', 'lastreferenceddate', 'lastvieweddate', 'latitude', 'localesidkey', 'longitude', 'manager', 'managerid', 'middlename', 'mobilephone', 'name', 'offlinetrialexpirationdate', 'offlinepdatrialexpirationdate', 'phone', 'portalrole', 'postalcode', 'profileid', 'receivesadmininfoemails', 'receivesinfoemails', 'senderemail', 'sendername', 'signature', 'smallphotourl', 'state', 'statecode', 'stayintouchnote', 'stayintouchsignature', 'stayintouchsubject', 'street', 'suffix', 'timezonesidkey', 'title', 'username', 'userpermissionscallcenterautologin', 'userpermissionschatteranswersuser', 'userpermissionsinteractionuser', 'userpermissionsjigsawprospectinguser', 'userpermissionsknowledgeuser', 'userpermissionsliveagentuser', 'userpermissionsmarketinguser', 'userpermissionsmobileuser', 'userpermissionsofflineuser', 'userpermissionssfcontentuser', 'userpermissionssiteforcecontributoruser', 'userpermissionssiteforcepublisheruser', 'userpermissionssupportuser', 'userpermissionswirelessuser', 'userpermissionsworkdotcomuserfeature', 'userpreferencesactivityreminderspopup', 'userpreferencesapexpagesdevelopermode', 'userpreferencescontentemailasandwhen', 'userpreferencescontentnoemail', 'userpreferencesenableautosubforfeeds', 'userpreferencesdisableallfeedsemail', 'userpreferencesdisableautosubforfeeds', 'userpreferencesdisablebookmarkemail', 'userpreferencesdisablechangecommentemail', 'userpreferencesdisableendorsementemail', 'userpreferencesdisablefilesharenotificationsforapi', 'userpreferencesdisablelatercommentemail', 'userpreferencesdisablelikeemail', 'userpreferencesdisablementionspostemail', 'userpreferencesdisableprofilepostemail', 'userpreferencesdisablesharepostemail', 'userpreferencesdisablefeedbackemail', 'userpreferencesdiscommentafterlikeemail', 'userpreferencesdismentionscommentemail', 'userpreferencesdisablemessageemail', 'userpreferencesdisablerewardemail', 'userpreferencesdisableworkemail', 'userpreferencesdisprofpostcommentemail', 'userpreferenceseventreminderscheckboxdefault', 'userpreferenceshidechatteronboardingsplash', 'userpreferenceshidecsndesktoptask', 'userpreferenceshidecsngetchattermobiletask', 'userpreferenceshidesecondchatteronboardingsplash', 'userpreferenceshides1browserui', 'userpreferencesjigsawlistuser', 'userpreferencesoptoutoftouch', 'userpreferencesprocessassistantcollapsed', 'userpreferencesshowcitytoexternalusers', 'userpreferencesshowcitytoguestusers', 'userpreferencesshowcountrytoexternalusers', 'userpreferencesshowcountrytoguestusers', 'userpreferencesshowemailtoexternalusers', 'userpreferencesshowfaxtoexternalusers', 'userpreferencesshowmanagertoexternalusers', 'userpreferencesshowmobilephonetoexternalusers', 'userpreferencesshowpostalcodetoexternalusers', 'userpreferencesshowpostalcodetoguestusers', 'userpreferencesshowstatetoexternalusers', 'userpreferencesshowstatetoguestusers', 'userpreferencesshowstreetaddresstoexternalusers', 'userpreferencesshowtitletoexternalusers', 'userpreferencesshowtitletoguestusers', 'userpreferencesshowworkphonetoexternalusers', 'userpreferencestaskreminderscheckboxdefault', 'userpreferencesremindersoundoff', 'userpreferencesdisablefollowersemail', 'userpreferencesshowprofilepictoguestusers', 'userroleid', 'usertype', 'wirelessemail']
});

'use strict';
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

angular.module('angular-normalize-salesforce').factory('normalizeSalesforce', ["ansSalesforceSObjects", "ansSalesforceStandardObjects", "ansSalesforceStandardFields", function(ansSalesforceSObjects, ansSalesforceStandardObjects, ansSalesforceStandardFields) {
  var NormalizeSalesforce;
  return new (NormalizeSalesforce = (function() {
    function NormalizeSalesforce() {
      this._denormalizeObject = __bind(this._denormalizeObject, this);
      this._denormalizeArray = __bind(this._denormalizeArray, this);
      this._denormalizeString = __bind(this._denormalizeString, this);
      this._normalizeObject = __bind(this._normalizeObject, this);
      this._normalizeArray = __bind(this._normalizeArray, this);
      this.denormalizeObjectName = __bind(this.denormalizeObjectName, this);
      this.denormalize = __bind(this.denormalize, this);
      this.normalize = __bind(this.normalize, this);
      this.standardFields = ansSalesforceStandardFields;
      this.standardObjects = ansSalesforceStandardObjects;
      this.sObjectFields = ansSalesforceSObjects;
    }

    NormalizeSalesforce.prototype.normalize = function(part) {
      var type_name;
      if (_.isNull(part) || _.isUndefined(part)) {
        if (_.isNull(part)) {
          return null;
        } else {
          return void 0;
        }
      }
      type_name = Object.prototype.toString.call(part);
      switch (false) {
        case !_(part).isString():
          return this._normalizeString(part);
        case !_(part).isArray():
          return this._normalizeArray(part);
        case !_(part).isObject():
          return this._normalizeObject(part);
        default:
          throw new Error("Type " + type_name + " not supported. Only String, Array and Object are supported.");
      }
    };

    NormalizeSalesforce.prototype.denormalize = function(part, sObject, map) {
      var type_name;
      if (map == null) {
        map = {};
      }
      type_name = Object.prototype.toString.call(part);
      switch (false) {
        case !_(part).isString():
          return this._denormalizeString(part, sObject, map);
        case !_(part).isArray():
          return this._denormalizeArray(part, sObject);
        case !_(part).isObject():
          return this._denormalizeObject(part, sObject);
        default:
          throw new Error("Type " + type_name + " not supported. Only String, Array and Object are supported.");
      }
    };

    NormalizeSalesforce.prototype.denormalizeObjectName = function(name) {
      return this._denormalize(name, this.standardObjects);
    };

    NormalizeSalesforce.prototype._normalizeString = function(string) {
      return string.toLowerCase().replace(/__c$/, '');
    };

    NormalizeSalesforce.prototype._normalizeArray = function(array) {
      return _.map(array, (function(_this) {
        return function(element) {
          return _this.normalize(element);
        };
      })(this));
    };

    NormalizeSalesforce.prototype._normalizeObject = function(object) {
      var normalized;
      normalized = {};
      _.each(object, (function(_this) {
        return function(value, key) {
          if (_(value).isObject() && !_(value).isFunction()) {
            normalized[_this.normalize(key)] = _this.normalize(value);
          } else {
            normalized[_this.normalize(key)] = value;
          }
          return true;
        };
      })(this));
      return normalized;
    };

    NormalizeSalesforce.prototype._denormalize = function(part, avoidList, prefix) {
      if (prefix == null) {
        prefix = void 0;
      }
      if (!_(avoidList).contains(part)) {
        if (prefix) {
          return "" + prefix + "." + part + "__c";
        } else {
          return "" + part + "__c";
        }
      } else {
        if (prefix) {
          return "" + prefix + "." + part;
        } else {
          return part;
        }
      }
    };

    NormalizeSalesforce.prototype._denormalizeString = function(string, sObject, map) {
      var parentRef, standardFields, stringParts;
      stringParts = string.split('.');
      if (stringParts.length > 1 && _.has(map, stringParts[0])) {
        parentRef = stringParts[0];
        string = stringParts[1];
        sObject = this.normalize(map[parentRef]);
      } else {
        string = stringParts[0];
        sObject = this.normalize(sObject);
      }
      standardFields = this.standardFields;
      if (_(this.sObjectFields).has(sObject)) {
        standardFields = _.uniq(standardFields.concat(this.sObjectFields[sObject]));
      }
      return this._denormalize(string, standardFields, parentRef);
    };

    NormalizeSalesforce.prototype._denormalizeArray = function(array, sObject) {
      return _.map(array, (function(_this) {
        return function(element) {
          return _this.denormalize(element, sObject);
        };
      })(this));
    };

    NormalizeSalesforce.prototype._denormalizeObject = function(object, sObject) {
      var denormalized;
      denormalized = {};
      _.each(object, (function(_this) {
        return function(value, key) {
          if (_(value).isObject() && !_(value).isFunction()) {
            denormalized[_this.denormalize(key, sObject)] = _this.denormalize(value, sObject);
          } else {
            denormalized[_this.denormalize(key, sObject)] = value;
          }
          return true;
        };
      })(this));
      return denormalized;
    };

    return NormalizeSalesforce;

  })());
}]);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UuY29mZmVlIiwic2FsZXNmb3JjZS1zdGFuZGFyZC1maWVsZHMuY29mZmVlIiwic2FsZXNmb3JjZS1zdGFuZGFyZC1vYmplY3RzLmNvZmZlZSIsInNhbGVzZm9yY2Utc29iamVjdHMuY29mZmVlIiwic2FsZXNmb3JjZS1zb2JqZWN0cy5qcyIsIm5vcm1hbGl6ZS1zYWxlc2ZvcmNlLmNvZmZlZSIsIm5vcm1hbGl6ZS1zYWxlc2ZvcmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FDQUE7QUFBQTs7QUNBQTtBQUFBOztBQ0FBO0FBQUE7RUFJRTtFQXNEQTtFQVdBO0VBNkRBO0VBNkNBO0VBNENBO0FDbk5GOztBQ1JBO0FBQUE7O0FBQUEsd0RBR1MsbUJBQUEsR0FBdUIseUZBQUE7RUFLOUI7RUNIQTtJREllO01BQ1g7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQ0E7TUFDQTtJQUhXOztJQUFiO01BTUU7TUFBQTtRQUNTO1VDUUw7UUFDRjtVQUNFO1FBQ0Y7TUFDRjtNRFZBO01BRUE7UUFBQTtVQ1lJO1FEWko7VUNjSTtRRGRKO1VDZ0JJO1FEaEJKO1VBS0k7TUFMSjtJQU5TOztJQUxYO01Bc0JFO01DYUE7UURkMkI7TUNnQjNCO01EZkE7TUFFQTtRQUFBO1VDaUJJO1FEakJKO1VDbUJJO1FEbkJKO1VDcUJJO1FEckJKO1VBS0k7TUFMSjtJQUhXOztJQXJCYjtNQ29ERTtJRGxCcUI7O0lBbEN2QjtNQ3dERTtJRGpCZ0I7O0lBdkNsQjtNQzRERTtRQUNFO1VBQ0U7UURuQlM7TUFBQTtJQURFOztJQTFDakI7TUErQ0U7TUFBQTtNQUVBO1FDc0JFO1VEckJBO1lBQ0U7VUN1QkE7WURyQkE7VUN1QkE7VUFDQTtRRDVCVztNQUFBO01DK0JmO0lEbENnQjs7SUE5Q2xCO01Db0ZFO1FEMUI4QjtNQzRCOUI7TUQzQkE7UUFDRTtVQzZCRTtRQUNGO1VBQ0U7UUFDRjtNQUNGO1FEL0JFO1VDaUNFO1FBQ0Y7VUFDRTtRQUNGO01BQ0Y7SUR6Q1k7O0lBMURkO01BaUVFO01BQUE7TUFDQTtRQUNFO1FBQ0E7UUFDQTtNQ3dDRjtRRHRDRTtRQUNBO01Dd0NGO01EdENBO01BQ0E7UUFDRTtNQ3dDRjtNQUNBO0lEckRrQjs7SUFoRXBCO01DeUhFO1FBQ0U7VUFDRTtRRDFDUztNQUFBO0lBREk7O0lBaEZuQjtNQXFGRTtNQUFBO01BRUE7UUM2Q0U7VUQ1Q0E7WUFDRTtVQzhDQTtZRDFDQTtVQzRDQTtVQUNBO1FEbkRXO01BQUE7TUNzRGY7SUR6RGtCOztJQzREcEI7O0VBRUY7QUR4SjhCLENBRGhDLENBQUEiLCJmaWxlIjoiYW5ndWxhci1ub3JtYWxpemUtc2FsZXNmb3JjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1ub3JtYWxpemUtc2FsZXNmb3JjZScsW10pXG4iLCIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UnKVxuLmNvbnN0YW50ICdhbnNTYWxlc2ZvcmNlU3RhbmRhcmRGaWVsZHMnLCBbXG4gICdpZCdcbiAgJ2lzZGVsZXRlZCdcbiAgJ25hbWUnXG4gICdjcmVhdGVkZGF0ZSdcbiAgJ2NyZWF0ZWRieWlkJ1xuICAnbGFzdG1vZGlmaWVkZGF0ZSdcbiAgJ2xhc3Rtb2RpZmllZGJ5aWQnXG4gICdzeXN0ZW1tb2RzdGFtcCdcbiAgJ2xhc3RhY3Rpdml0eWRhdGUnXG4gICdjdXJyZW5jeWlzb2NvZGUnXG4gICdvd25lcmlkJ1xuICAncmVjb3JkdHlwZWlkJ1xuICAnbGFzdHJlZmVyZW5jZWRkYXRlJ1xuICAnbGFzdHZpZXdlZGRhdGUnXG5dXG4iLCIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItbm9ybWFsaXplLXNhbGVzZm9yY2UnKVxuLmNvbnN0YW50ICdhbnNTYWxlc2ZvcmNlU3RhbmRhcmRPYmplY3RzJywgW1xuICBcImFjY2VwdGVkZXZlbnRyZWxhdGlvblwiLFwiYWNjb3VudFwiLFxuICBcImFjY291bnRjb250YWN0cm9sZVwiLFwiYWNjb3VudGZlZWRcIixcImFjY291bnRoaXN0b3J5XCIsXCJhY2NvdW50cGFydG5lclwiLFxuICBcImFjY291bnRzaGFyZVwiLFwiYWN0aXZpdHloaXN0b3J5XCIsXCJhZGRpdGlvbmFsbnVtYmVyXCIsXCJhZ2dyZWdhdGVyZXN1bHRcIixcbiAgXCJhbm5vdW5jZW1lbnRcIixcImFwZXhjbGFzc1wiLFwiYXBleGNvbXBvbmVudFwiLFwiYXBleHBhZ2VcIixcbiAgXCJhcGV4dGVzdHF1ZXVlaXRlbVwiLFwiYXBleHRlc3RyZXN1bHRcIixcImFwZXh0cmlnZ2VyXCIsXCJhcHBtZW51aXRlbVwiLFxuICBcImFzc2lnbm1lbnRydWxlXCIsXCJhc3luY2FwZXhqb2JcIixcImF0dGFjaGVkY29udGVudGRvY3VtZW50XCIsXCJhdHRhY2htZW50XCIsXG4gIFwiYXV0aHNlc3Npb25cIixcImJyYW5kdGVtcGxhdGVcIixcImJ1c2luZXNzaG91cnNcIixcImJ1c2luZXNzcHJvY2Vzc1wiLFxuICBcImNhbGxjZW50ZXJcIixcImNhdGVnb3J5bm9kZVwiLFwiY2hhdHRlcmFjdGl2aXR5XCIsXCJjbGllbnRicm93c2VyXCIsXG4gIFwiY29sbGFib3JhdGlvbmdyb3VwXCIsXCJjb2xsYWJvcmF0aW9uZ3JvdXBmZWVkXCIsXG4gIFwiY29sbGFib3JhdGlvbmdyb3VwbWVtYmVyXCIsXCJjb2xsYWJvcmF0aW9uZ3JvdXBtZW1iZXJyZXF1ZXN0XCIsXG4gIFwiY29sbGFib3JhdGlvbmludml0YXRpb25cIixcImNvbWJpbmVkYXR0YWNobWVudFwiLFwiY29tbXVuaXR5XCIsXCJjb250YWN0XCIsXG4gIFwiY29udGFjdGZlZWRcIixcImNvbnRhY3RoaXN0b3J5XCIsXCJjb250YWN0c2hhcmVcIixcImNvbnRlbnRkb2N1bWVudFwiLFxuICBcImNvbnRlbnRkb2N1bWVudGZlZWRcIixcImNvbnRlbnRkb2N1bWVudGhpc3RvcnlcIixcImNvbnRlbnRkb2N1bWVudGxpbmtcIixcbiAgXCJjb250ZW50dmVyc2lvblwiLFwiY29udGVudHZlcnNpb25oaXN0b3J5XCIsXCJjcm9uam9iZGV0YWlsXCIsXCJjcm9udHJpZ2dlclwiLFxuICBcImRhc2hib2FyZFwiLFwiZGFzaGJvYXJkY29tcG9uZW50XCIsXCJkYXNoYm9hcmRjb21wb25lbnRmZWVkXCIsXG4gIFwiZGFzaGJvYXJkZmVlZFwiLFwiZGVjbGluZWRldmVudHJlbGF0aW9uXCIsXCJkb2N1bWVudFwiLFxuICBcImRvY3VtZW50YXR0YWNobWVudG1hcFwiLFwiZG9tYWluXCIsXCJkb21haW5zaXRlXCIsXCJlbWFpbHNlcnZpY2VzYWRkcmVzc1wiLFxuICBcImVtYWlsc2VydmljZXNmdW5jdGlvblwiLFwiZW1haWxzdGF0dXNcIixcImVtYWlsdGVtcGxhdGVcIixcbiAgXCJlbnRpdHlzdWJzY3JpcHRpb25cIixcImV2ZW50XCIsXCJldmVudGZlZWRcIixcImV2ZW50cmVsYXRpb25cIixcImZlZWRjb21tZW50XCIsXG4gIFwiZmVlZGl0ZW1cIixcImZlZWRsaWtlXCIsXCJmZWVkdHJhY2tlZGNoYW5nZVwiLFwiZmllbGRwZXJtaXNzaW9uc1wiLFxuICBcImZpc2NhbHllYXJzZXR0aW5nc1wiLFwiZm9sZGVyXCIsXCJmb3JlY2FzdHNoYXJlXCIsXCJncm91cFwiLFwiZ3JvdXBtZW1iZXJcIixcbiAgXCJoYXNodGFnZGVmaW5pdGlvblwiLFwiaG9saWRheVwiLFwiaWRlYVwiLFwiaWRlYWNvbW1lbnRcIixcImxvZ2luaXBcIixcbiAgXCJtYWlsbWVyZ2V0ZW1wbGF0ZVwiLFwibW9iaWxlZGV2aWNlcmVnaXN0cmFyXCIsXCJuYW1lXCIsXCJub3RlXCIsXG4gIFwibm90ZWFuZGF0dGFjaG1lbnRcIixcIm9iamVjdHBlcm1pc3Npb25zXCIsXCJvcGVuYWN0aXZpdHlcIixcbiAgXCJvcmd3aWRlZW1haWxhZGRyZXNzXCIsXCJvd25lZGNvbnRlbnRkb2N1bWVudFwiLFwicGVyaW9kXCIsXCJwZXJtaXNzaW9uc2V0XCIsXG4gIFwicGVybWlzc2lvbnNldGFzc2lnbm1lbnRcIixcInBlcm1pc3Npb25zZXRsaWNlbnNlXCIsXG4gIFwicGVybWlzc2lvbnNldGxpY2Vuc2Vhc3NpZ25cIixcInByb2Nlc3NkZWZpbml0aW9uXCIsXCJwcm9jZXNzaW5zdGFuY2VcIixcbiAgXCJwcm9jZXNzaW5zdGFuY2VoaXN0b3J5XCIsXCJwcm9jZXNzaW5zdGFuY2Vub2RlXCIsXCJwcm9jZXNzaW5zdGFuY2VzdGVwXCIsXG4gIFwicHJvY2Vzc2luc3RhbmNld29ya2l0ZW1cIixcInByb2Nlc3Nub2RlXCIsXCJwcm9maWxlXCIsXCJwdXNodG9waWNcIixcbiAgXCJxdWV1ZXNvYmplY3RcIixcInJlY2VudGx5dmlld2VkXCIsXCJyZWNvcmR0eXBlXCIsXCJyZXBvcnRcIixcInJlcG9ydGZlZWRcIixcbiAgXCJzY29udHJvbFwiLFwic2V0dXBlbnRpdHlhY2Nlc3NcIixcInNpdGVcIixcInNpdGVmZWVkXCIsXCJzaXRlaGlzdG9yeVwiLFxuICBcInN0YXRpY3Jlc291cmNlXCIsXCJ0YXNrXCIsXCJ0YXNrZmVlZFwiLFwidGFza3ByaW9yaXR5XCIsXCJ0YXNrc3RhdHVzXCIsXCJ0b3BpY1wiLFxuICBcInRvcGljYXNzaWdubWVudFwiLFwidG9waWNmZWVkXCIsXCJ1bmRlY2lkZWRldmVudHJlbGF0aW9uXCIsXCJ1c2VyXCIsXG4gIFwidXNlcmZlZWRcIixcInVzZXJsaWNlbnNlXCIsXCJ1c2VycHJlZmVyZW5jZVwiLFwidXNlcnByb2ZpbGVcIixcbiAgXCJ1c2VycmVjb3JkYWNjZXNzXCIsXCJ1c2Vycm9sZVwiLFwidXNlcnNoYXJlXCIsXCJ2b3RlXCJcbl1cbiIsIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1ub3JtYWxpemUtc2FsZXNmb3JjZScpXG4uY29uc3RhbnQgJ2Fuc1NhbGVzZm9yY2VTT2JqZWN0cycsIHtcbiAgYWNjb3VudDogW1xuICAgICdtYXN0ZXJyZWNvcmRpZCcsXG4gICAgJ2N1cnJlbmN5aXNvY29kZScsXG4gICAgJ2RpdmlzaW9uJyxcbiAgICAnaWQnLFxuICAgICdhY2NvdW50bnVtYmVyJyxcbiAgICAnb3duZXJpZCcsXG4gICAgJ3JlY29yZHR5cGVpZCcsXG4gICAgJ3NpdGUnLFxuICAgICdhY2NvdW50c291cmNlJyxcbiAgICAnYW5udWFscmV2ZW51ZScsXG4gICAgJ2JpbGxpbmdzdHJlZXQnLFxuICAgICdiaWxsaW5nY2l0eScsXG4gICAgJ2JpbGxpbmdzdGF0ZScsXG4gICAgJ2JpbGxpbmdwb3N0YWxjb2RlJyxcbiAgICAnYmlsbGluZ2NvdW50cnknLFxuICAgICdiaWxsaW5nbGF0aXR1ZGUnLFxuICAgICdiaWxsaW5nbG9uZ2l0dWRlJyxcbiAgICAnY3JlYXRlZGJ5aWQnLFxuICAgICdjcmVhdGVkZGF0ZScsXG4gICAgJ2ppZ3NhdycsXG4gICAgJ2lzZGVsZXRlZCcsXG4gICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAnbnVtYmVyb2ZlbXBsb3llZXMnLFxuICAgICdpc2V4Y2x1ZGVkZnJvbXJlYWxpZ24nLFxuICAgICdmYXgnLFxuICAgICdpbmR1c3RyeScsXG4gICAgJ2ppZ3Nhd2NvbXBhbnlpZCcsXG4gICAgJ2xhc3RhY3Rpdml0eWRhdGUnLFxuICAgICdsYXN0bW9kaWZpZWRieWlkJyxcbiAgICAnbGFzdG1vZGlmaWVkZGF0ZScsXG4gICAgJ2xhc3RyZWZlcmVuY2VkZGF0ZScsXG4gICAgJ2xhc3R2aWV3ZWRkYXRlJyxcbiAgICAnb3duZXJzaGlwJyxcbiAgICAncGFyZW50aWQnLFxuICAgICdwaG9uZScsXG4gICAgJ3Bob3RvdXJsJyxcbiAgICAncmF0aW5nJyxcbiAgICAnY29ubmVjdGlvbnJlY2VpdmVkaWQnLFxuICAgICdzaWMnLFxuICAgICdzaWNkZXNjJyxcbiAgICAnY29ubmVjdGlvbnNlbnRpZCcsXG4gICAgJ3NoaXBwaW5nc3RyZWV0JyxcbiAgICAnc2hpcHBpbmdjaXR5JyxcbiAgICAnc2hpcHBpbmdzdGF0ZScsXG4gICAgJ3NoaXBwaW5ncG9zdGFsY29kZScsXG4gICAgJ3NoaXBwaW5nY291bnRyeScsXG4gICAgJ3NoaXBwaW5nbGF0aXR1ZGUnLFxuICAgICdzaGlwcGluZ2xvbmdpdHVkZScsXG4gICAgJ3N5c3RlbW1vZHN0YW1wJyxcbiAgICAndGlja2Vyc3ltYm9sJyxcbiAgICAndHlwZScsXG4gICAgJ3dlYnNpdGUnXG4gIF1cbiAgYXR0YWNobWVudDogW1xuICAgICdib2R5JyxcbiAgICAnYm9keWxlbmd0aCcsXG4gICAgJ2Nvbm5lY3Rpb25yZWNlaXZlZGlkJyxcbiAgICAnY29ubmVjdGlvbnNlbnRpZCcsXG4gICAgJ2NvbnRlbnR0eXBlJyxcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICdpc3BhcnRuZXJzaGFyZWQnLFxuICAgICdpc3ByaXZhdGUnLFxuICAgICdwYXJlbnRpZCdcbiAgXVxuICBjb250YWN0OiBbXG4gICAgJ2FjY291bnRpZCcsXG4gICAgJ2Fzc2lzdGFudG5hbWUnLFxuICAgICdhc3Npc3RhbnRwaG9uZScsXG4gICAgJ2JpcnRoZGF0ZScsXG4gICAgJ21hc3RlcnJlY29yZGlkJyxcbiAgICAnY3VycmVuY3lpc29jb2RlJyxcbiAgICAnZGl2aXNpb24nLFxuICAgICdpZCcsXG4gICAgJ293bmVyaWQnLFxuICAgICdjcmVhdGVkYnlpZCcsXG4gICAgJ2NyZWF0ZWRkYXRlJyxcbiAgICAnamlnc2F3JyxcbiAgICAnaXNkZWxldGVkJyxcbiAgICAnZGVwYXJ0bWVudCcsXG4gICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAnZG9ub3RjYWxsJyxcbiAgICAnZW1haWwnLFxuICAgICdlbWFpbGJvdW5jZWRkYXRlJyxcbiAgICAnZW1haWxib3VuY2VkcmVhc29uJyxcbiAgICAnaGFzb3B0ZWRvdXRvZmVtYWlsJyxcbiAgICAnZmF4JyxcbiAgICAnaGFzb3B0ZWRvdXRvZmZheCcsXG4gICAgJ2hvbWVwaG9uZScsXG4gICAgJ2lzZW1haWxib3VuY2VkJyxcbiAgICAnamlnc2F3Y29udGFjdGlkJyxcbiAgICAnbGFzdGFjdGl2aXR5ZGF0ZScsXG4gICAgJ2xhc3Rtb2RpZmllZGJ5aWQnLFxuICAgICdsYXN0bW9kaWZpZWRkYXRlJyxcbiAgICAnbGFzdHJlZmVyZW5jZWRkYXRlJyxcbiAgICAnbGFzdGN1cmVxdWVzdGRhdGUnLFxuICAgICdsYXN0Y3V1cGRhdGVkYXRlJyxcbiAgICAnbGFzdHZpZXdlZGRhdGUnLFxuICAgICdsZWFkc291cmNlJyxcbiAgICAnbWFpbGluZ3N0cmVldCcsXG4gICAgJ21haWxpbmdjaXR5JyxcbiAgICAnbWFpbGluZ3N0YXRlJyxcbiAgICAnbWFpbGluZ3Bvc3RhbGNvZGUnLFxuICAgICdtYWlsaW5nY291bnRyeScsXG4gICAgJ21haWxpbmdsYXRpdHVkZScsXG4gICAgJ21haWxpbmdsb25naXR1ZGUnLFxuICAgICdtb2JpbGVwaG9uZScsXG4gICAgJ3NhbHV0YXRpb24nLFxuICAgICdmaXJzdG5hbWUnLFxuICAgICdsYXN0bmFtZScsXG4gICAgJ290aGVyc3RyZWV0JyxcbiAgICAnb3RoZXJjaXR5JyxcbiAgICAnb3RoZXJzdGF0ZScsXG4gICAgJ290aGVycG9zdGFsY29kZScsXG4gICAgJ290aGVyY291bnRyeScsXG4gICAgJ290aGVycGhvbmUnLFxuICAgICdvdGhlcmxhdGl0dWRlJyxcbiAgICAnb3RoZXJsb25naXR1ZGUnXG4gICAgJ3Bob25lJyxcbiAgICAncGhvdG91cmwnLFxuICAgICdjb25uZWN0aW9ucmVjZWl2ZWRpZCcsXG4gICAgJ3JlcG9ydHN0b2lkJyxcbiAgICAnY29ubmVjdGlvbnNlbnRpZCcsXG4gICAgJ3N5c3RlbW1vZHN0YW1wJyxcbiAgICAndGl0bGUnXG4gIF1cbiAgZXZlbnQ6IFtcbiAgICAnYWNjb3VudGlkJyxcbiAgICAnY3VycmVuY3lpc29jb2RlJyxcbiAgICAnaWQnLFxuICAgICdpc2FsbGRheWV2ZW50JyxcbiAgICAnaXNhcmNoaXZlZCcsXG4gICAgJ293bmVyaWQnLFxuICAgICdpc3JlY3VycmVuY2UnLFxuICAgICdjcmVhdGVkYnlpZCcsXG4gICAgJ2NyZWF0ZWRkYXRlJyxcbiAgICAnYWN0aXZpdHlkYXRlJyxcbiAgICAnaXNkZWxldGVkJyxcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICdkaXZpc2lvbicsXG4gICAgJ2R1cmF0aW9uaW5taW51dGVzJyxcbiAgICAnZW5kZGF0ZXRpbWUnLFxuICAgICdyZWN1cnJlbmNlZW5kZGF0ZW9ubHknLFxuICAgICdncm91cGV2ZW50dHlwZScsXG4gICAgJ2lzY2hpbGQnLFxuICAgICdpc2dyb3VwZXZlbnQnLFxuICAgICdsYXN0bW9kaWZpZWRieWlkJyxcbiAgICAnbGFzdG1vZGlmaWVkZGF0ZScsXG4gICAgJ2xvY2F0aW9uJyxcbiAgICAnd2hvaWQnLFxuICAgICdpc3ByaXZhdGUnLFxuICAgICdpc3Zpc2libGVpbnNlbGZzZXJ2aWNlJyxcbiAgICAncmVjdXJyZW5jZWFjdGl2aXR5aWQnLFxuICAgICdyZWN1cnJlbmNlZGF5b2Ztb250aCcsXG4gICAgJ3JlY3VycmVuY2VkYXlvZndlZWttYXNrJyxcbiAgICAncmVjdXJyZW5jZWluc3RhbmNlJyxcbiAgICAncmVjdXJyZW5jZWludGVydmFsJyxcbiAgICAncmVjdXJyZW5jZW1vbnRob2Z5ZWFyJyxcbiAgICAncmVjdXJyZW5jZXRpbWV6b25lc2lka2V5JyxcbiAgICAncmVjdXJyZW5jZXR5cGUnLFxuICAgICd3aGF0aWQnLFxuICAgICdyZW1pbmRlcmRhdGV0aW1lJyxcbiAgICAnaXNyZW1pbmRlcnNldCcsXG4gICAgJ3Nob3dhcycsXG4gICAgJ3N0YXJ0ZGF0ZXRpbWUnLFxuICAgICdyZWN1cnJlbmNlc3RhcnRkYXRldGltZScsXG4gICAgJ3N1YmplY3QnLFxuICAgICdzeXN0ZW1tb2RzdGFtcCcsXG4gICAgJ2FjdGl2aXR5ZGF0ZXRpbWUnLFxuICAgICd0eXBlJ1xuICBdXG4gIHRhc2s6IFtcbiAgICAnYWNjb3VudGlkJyxcbiAgICAnY3VycmVuY3lpc29jb2RlJyxcbiAgICAnaWQnLFxuICAgICdpc2FyY2hpdmVkJyxcbiAgICAnb3duZXJpZCcsXG4gICAgJ2NhbGxkdXJhdGlvbmluc2Vjb25kcycsXG4gICAgJ2NhbGxvYmplY3QnLFxuICAgICdjYWxsZGlzcG9zaXRpb24nLFxuICAgICdjYWxsdHlwZScsXG4gICAgJ2lzY2xvc2VkJyxcbiAgICAnZGVzY3JpcHRpb24nLFxuICAgICdpc3JlY3VycmVuY2UnLFxuICAgICdjcmVhdGVkYnlpZCcsXG4gICAgJ2NyZWF0ZWRkYXRlJyxcbiAgICAnaXNkZWxldGVkJyxcbiAgICAnZGl2aXNpb24nLFxuICAgICdhY3Rpdml0eWRhdGUnLFxuICAgICdyZWN1cnJlbmNlZW5kZGF0ZW9ubHknLFxuICAgICdsYXN0bW9kaWZpZWRieWlkJyxcbiAgICAnbGFzdG1vZGlmaWVkZGF0ZScsXG4gICAgJ3dob2lkJyxcbiAgICAncHJpb3JpdHknLFxuICAgICdpc3Zpc2libGVpbnNlbGZzZXJ2aWNlJyxcbiAgICAnY29ubmVjdGlvbnJlY2VpdmVkaWQnLFxuICAgICdyZWN1cnJlbmNlYWN0aXZpdHlpZCcsXG4gICAgJ3JlY3VycmVuY2VkYXlvZm1vbnRoJyxcbiAgICAncmVjdXJyZW5jZWRheW9md2Vla21hc2snLFxuICAgICdyZWN1cnJlbmNlaW5zdGFuY2UnLFxuICAgICdyZWN1cnJlbmNlaW50ZXJ2YWwnLFxuICAgICdyZWN1cnJlbmNlbW9udGhvZnllYXInLFxuICAgICdyZWN1cnJlbmNldGltZXpvbmVzaWRrZXknLFxuICAgICdyZWN1cnJlbmNldHlwZScsXG4gICAgJ3doYXRpZCcsXG4gICAgJ3JlbWluZGVyZGF0ZXRpbWUnLFxuICAgICdpc3JlbWluZGVyc2V0JyxcbiAgICAncmVjdXJyZW5jZXJlZ2VuZXJhdGVkdHlwZScsXG4gICAgJ2Nvbm5lY3Rpb25zZW50aWQnLFxuICAgICdyZWN1cnJlbmNlc3RhcnRkYXRlb25seScsXG4gICAgJ3N0YXR1cycsXG4gICAgJ3N1YmplY3QnLFxuICAgICdzeXN0ZW1tb2RzdGFtcCcsXG4gICAgJ3R5cGUnXG4gIF0sXG4gIHVzZXI6IFtcbiAgICAnYWJvdXRtZScsXG4gICAgJ2FjY291bnRpZCcsXG4gICAgJ2FkZHJlc3MnLFxuICAgICdhbGlhcycsXG4gICAgJ2JhZGdldGV4dCcsXG4gICAgJ2NhbGxjZW50ZXJpZCcsXG4gICAgJ2NpdHknLFxuICAgICdjb21tdW5pdHluaWNrbmFtZScsXG4gICAgJ2NvbXBhbnluYW1lJyxcbiAgICAnY29udGFjdGlkJyxcbiAgICAnY291bnRyeScsXG4gICAgJ2NvdW50cnljb2RlJyxcbiAgICAnY3VycmVudHN0YXR1cycsXG4gICAgJ2RlZmF1bHRjdXJyZW5jeWlzb2NvZGUnLFxuICAgICdkZWZhdWx0ZGl2aXNpb24nLFxuICAgICdkZWZhdWx0Z3JvdXBub3RpZmljYXRpb25mcmVxdWVuY3knLFxuICAgICdkZWxlZ2F0ZWRhcHByb3ZlcmlkJyxcbiAgICAnZGVwYXJ0bWVudCcsXG4gICAgJ2RpZ2VzdGZyZXF1ZW5jeScsXG4gICAgJ2RpdmlzaW9uJyxcbiAgICAnZW1haWwnLFxuICAgICdlbWFpbGVuY29kaW5na2V5JyxcbiAgICAnZW1haWxwcmVmZXJlbmNlc2F1dG9iY2MnLFxuICAgICdlbWFpbHByZWZlcmVuY2VzYXV0b2JjY3N0YXlpbnRvdWNoJyxcbiAgICAnZW1haWxwcmVmZXJlbmNlc3N0YXlpbnRvdWNocmVtaW5kZXInLFxuICAgICdlbXBsb3llZW51bWJlcicsXG4gICAgJ2V4dGVuc2lvbicsXG4gICAgJ2ZheCcsXG4gICAgJ2ZlZGVyYXRpb25pZGVudGlmaWVyJyxcbiAgICAnZmlyc3RuYW1lJyxcbiAgICAnZm9yZWNhc3RlbmFibGVkJyxcbiAgICAnZnVsbHBob3RvdXJsJyxcbiAgICAnaXNhY3RpdmUnLFxuICAgICdpc3BhcnRuZXInLFxuICAgICdpc3BvcnRhbGVuYWJsZWQnLFxuICAgICdpc3BvcnRhbHNlbGZyZWdpc3RlcmVkJyxcbiAgICAnaXNwcm1zdXBlcnVzZXInLFxuICAgICdqaWdzYXdpbXBvcnRsaW1pdG92ZXJyaWRlJyxcbiAgICAnbGFuZ3VhZ2Vsb2NhbGVrZXknLFxuICAgICdsYXN0bG9naW5kYXRlJyxcbiAgICAnbGFzdHBhc3N3b3JkY2hhbmdlZGF0ZScsXG4gICAgJ2xhc3RuYW1lJyxcbiAgICAnbGFzdHJlZmVyZW5jZWRkYXRlJyxcbiAgICAnbGFzdHZpZXdlZGRhdGUnLFxuICAgICdsYXRpdHVkZScsXG4gICAgJ2xvY2FsZXNpZGtleScsXG4gICAgJ2xvbmdpdHVkZScsXG4gICAgJ21hbmFnZXInLFxuICAgICdtYW5hZ2VyaWQnLFxuICAgICdtaWRkbGVuYW1lJyxcbiAgICAnbW9iaWxlcGhvbmUnLFxuICAgICduYW1lJyxcbiAgICAnb2ZmbGluZXRyaWFsZXhwaXJhdGlvbmRhdGUnLFxuICAgICdvZmZsaW5lcGRhdHJpYWxleHBpcmF0aW9uZGF0ZScsXG4gICAgJ3Bob25lJyxcbiAgICAncG9ydGFscm9sZScsXG4gICAgJ3Bvc3RhbGNvZGUnLFxuICAgICdwcm9maWxlaWQnLFxuICAgICdyZWNlaXZlc2FkbWluaW5mb2VtYWlscycsXG4gICAgJ3JlY2VpdmVzaW5mb2VtYWlscycsXG4gICAgJ3NlbmRlcmVtYWlsJyxcbiAgICAnc2VuZGVybmFtZScsXG4gICAgJ3NpZ25hdHVyZScsXG4gICAgJ3NtYWxscGhvdG91cmwnLFxuICAgICdzdGF0ZScsXG4gICAgJ3N0YXRlY29kZScsXG4gICAgJ3N0YXlpbnRvdWNobm90ZScsXG4gICAgJ3N0YXlpbnRvdWNoc2lnbmF0dXJlJyxcbiAgICAnc3RheWludG91Y2hzdWJqZWN0JyxcbiAgICAnc3RyZWV0JyxcbiAgICAnc3VmZml4JyxcbiAgICAndGltZXpvbmVzaWRrZXknLFxuICAgICd0aXRsZScsXG4gICAgJ3VzZXJuYW1lJyxcbiAgICAndXNlcnBlcm1pc3Npb25zY2FsbGNlbnRlcmF1dG9sb2dpbicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc2NoYXR0ZXJhbnN3ZXJzdXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc2ludGVyYWN0aW9udXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc2ppZ3Nhd3Byb3NwZWN0aW5ndXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc2tub3dsZWRnZXVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnNsaXZlYWdlbnR1c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25zbWFya2V0aW5ndXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc21vYmlsZXVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnNvZmZsaW5ldXNlcicsXG4gICAgJ3VzZXJwZXJtaXNzaW9uc3NmY29udGVudHVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnNzaXRlZm9yY2Vjb250cmlidXRvcnVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnNzaXRlZm9yY2VwdWJsaXNoZXJ1c2VyJyxcbiAgICAndXNlcnBlcm1pc3Npb25zc3VwcG9ydHVzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnN3aXJlbGVzc3VzZXInLFxuICAgICd1c2VycGVybWlzc2lvbnN3b3JrZG90Y29tdXNlcmZlYXR1cmUnLFxuICAgICd1c2VycHJlZmVyZW5jZXNhY3Rpdml0eXJlbWluZGVyc3BvcHVwJyxcbiAgICAndXNlcnByZWZlcmVuY2VzYXBleHBhZ2VzZGV2ZWxvcGVybW9kZScsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2NvbnRlbnRlbWFpbGFzYW5kd2hlbicsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2NvbnRlbnRub2VtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZW5hYmxlYXV0b3N1YmZvcmZlZWRzJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWFsbGZlZWRzZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlYXV0b3N1YmZvcmZlZWRzJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWJvb2ttYXJrZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlY2hhbmdlY29tbWVudGVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWVuZG9yc2VtZW50ZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlZmlsZXNoYXJlbm90aWZpY2F0aW9uc2ZvcmFwaScsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVsYXRlcmNvbW1lbnRlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVsaWtlZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlbWVudGlvbnNwb3N0ZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlcHJvZmlsZXBvc3RlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVzaGFyZXBvc3RlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVmZWVkYmFja2VtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzY29tbWVudGFmdGVybGlrZWVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzbWVudGlvbnNjb21tZW50ZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlbWVzc2FnZWVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZXJld2FyZGVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZGlzYWJsZXdvcmtlbWFpbCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc2Rpc3Byb2Zwb3N0Y29tbWVudGVtYWlsJyxcbiAgICAndXNlcnByZWZlcmVuY2VzZXZlbnRyZW1pbmRlcnNjaGVja2JveGRlZmF1bHQnLFxuICAgICd1c2VycHJlZmVyZW5jZXNoaWRlY2hhdHRlcm9uYm9hcmRpbmdzcGxhc2gnLFxuICAgICd1c2VycHJlZmVyZW5jZXNoaWRlY3NuZGVza3RvcHRhc2snLFxuICAgICd1c2VycHJlZmVyZW5jZXNoaWRlY3NuZ2V0Y2hhdHRlcm1vYmlsZXRhc2snLFxuICAgICd1c2VycHJlZmVyZW5jZXNoaWRlc2Vjb25kY2hhdHRlcm9uYm9hcmRpbmdzcGxhc2gnLFxuICAgICd1c2VycHJlZmVyZW5jZXNoaWRlczFicm93c2VydWknLFxuICAgICd1c2VycHJlZmVyZW5jZXNqaWdzYXdsaXN0dXNlcicsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc29wdG91dG9mdG91Y2gnLFxuICAgICd1c2VycHJlZmVyZW5jZXNwcm9jZXNzYXNzaXN0YW50Y29sbGFwc2VkJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd2NpdHl0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93Y2l0eXRvZ3Vlc3R1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3djb3VudHJ5dG9leHRlcm5hbHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd2NvdW50cnl0b2d1ZXN0dXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93ZW1haWx0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93ZmF4dG9leHRlcm5hbHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd21hbmFnZXJ0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93bW9iaWxlcGhvbmV0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93cG9zdGFsY29kZXRvZXh0ZXJuYWx1c2VycycsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3Nob3dwb3N0YWxjb2RldG9ndWVzdHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd3N0YXRldG9leHRlcm5hbHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd3N0YXRldG9ndWVzdHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2Vzc2hvd3N0cmVldGFkZHJlc3N0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93dGl0bGV0b2V4dGVybmFsdXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93dGl0bGV0b2d1ZXN0dXNlcnMnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93d29ya3Bob25ldG9leHRlcm5hbHVzZXJzJyxcbiAgICAndXNlcnByZWZlcmVuY2VzdGFza3JlbWluZGVyc2NoZWNrYm94ZGVmYXVsdCcsXG4gICAgJ3VzZXJwcmVmZXJlbmNlc3JlbWluZGVyc291bmRvZmYnLFxuICAgICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlZm9sbG93ZXJzZW1haWwnLFxuICAgICd1c2VycHJlZmVyZW5jZXNzaG93cHJvZmlsZXBpY3RvZ3Vlc3R1c2VycycsXG4gICAgJ3VzZXJyb2xlaWQnLFxuICAgICd1c2VydHlwZScsXG4gICAgJ3dpcmVsZXNzZW1haWwnXG4gIF1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJykuY29uc3RhbnQoJ2Fuc1NhbGVzZm9yY2VTT2JqZWN0cycsIHtcbiAgYWNjb3VudDogWydtYXN0ZXJyZWNvcmRpZCcsICdjdXJyZW5jeWlzb2NvZGUnLCAnZGl2aXNpb24nLCAnaWQnLCAnYWNjb3VudG51bWJlcicsICdvd25lcmlkJywgJ3JlY29yZHR5cGVpZCcsICdzaXRlJywgJ2FjY291bnRzb3VyY2UnLCAnYW5udWFscmV2ZW51ZScsICdiaWxsaW5nc3RyZWV0JywgJ2JpbGxpbmdjaXR5JywgJ2JpbGxpbmdzdGF0ZScsICdiaWxsaW5ncG9zdGFsY29kZScsICdiaWxsaW5nY291bnRyeScsICdiaWxsaW5nbGF0aXR1ZGUnLCAnYmlsbGluZ2xvbmdpdHVkZScsICdjcmVhdGVkYnlpZCcsICdjcmVhdGVkZGF0ZScsICdqaWdzYXcnLCAnaXNkZWxldGVkJywgJ2Rlc2NyaXB0aW9uJywgJ251bWJlcm9mZW1wbG95ZWVzJywgJ2lzZXhjbHVkZWRmcm9tcmVhbGlnbicsICdmYXgnLCAnaW5kdXN0cnknLCAnamlnc2F3Y29tcGFueWlkJywgJ2xhc3RhY3Rpdml0eWRhdGUnLCAnbGFzdG1vZGlmaWVkYnlpZCcsICdsYXN0bW9kaWZpZWRkYXRlJywgJ2xhc3RyZWZlcmVuY2VkZGF0ZScsICdsYXN0dmlld2VkZGF0ZScsICdvd25lcnNoaXAnLCAncGFyZW50aWQnLCAncGhvbmUnLCAncGhvdG91cmwnLCAncmF0aW5nJywgJ2Nvbm5lY3Rpb25yZWNlaXZlZGlkJywgJ3NpYycsICdzaWNkZXNjJywgJ2Nvbm5lY3Rpb25zZW50aWQnLCAnc2hpcHBpbmdzdHJlZXQnLCAnc2hpcHBpbmdjaXR5JywgJ3NoaXBwaW5nc3RhdGUnLCAnc2hpcHBpbmdwb3N0YWxjb2RlJywgJ3NoaXBwaW5nY291bnRyeScsICdzaGlwcGluZ2xhdGl0dWRlJywgJ3NoaXBwaW5nbG9uZ2l0dWRlJywgJ3N5c3RlbW1vZHN0YW1wJywgJ3RpY2tlcnN5bWJvbCcsICd0eXBlJywgJ3dlYnNpdGUnXSxcbiAgYXR0YWNobWVudDogWydib2R5JywgJ2JvZHlsZW5ndGgnLCAnY29ubmVjdGlvbnJlY2VpdmVkaWQnLCAnY29ubmVjdGlvbnNlbnRpZCcsICdjb250ZW50dHlwZScsICdkZXNjcmlwdGlvbicsICdpc3BhcnRuZXJzaGFyZWQnLCAnaXNwcml2YXRlJywgJ3BhcmVudGlkJ10sXG4gIGNvbnRhY3Q6IFsnYWNjb3VudGlkJywgJ2Fzc2lzdGFudG5hbWUnLCAnYXNzaXN0YW50cGhvbmUnLCAnYmlydGhkYXRlJywgJ21hc3RlcnJlY29yZGlkJywgJ2N1cnJlbmN5aXNvY29kZScsICdkaXZpc2lvbicsICdpZCcsICdvd25lcmlkJywgJ2NyZWF0ZWRieWlkJywgJ2NyZWF0ZWRkYXRlJywgJ2ppZ3NhdycsICdpc2RlbGV0ZWQnLCAnZGVwYXJ0bWVudCcsICdkZXNjcmlwdGlvbicsICdkb25vdGNhbGwnLCAnZW1haWwnLCAnZW1haWxib3VuY2VkZGF0ZScsICdlbWFpbGJvdW5jZWRyZWFzb24nLCAnaGFzb3B0ZWRvdXRvZmVtYWlsJywgJ2ZheCcsICdoYXNvcHRlZG91dG9mZmF4JywgJ2hvbWVwaG9uZScsICdpc2VtYWlsYm91bmNlZCcsICdqaWdzYXdjb250YWN0aWQnLCAnbGFzdGFjdGl2aXR5ZGF0ZScsICdsYXN0bW9kaWZpZWRieWlkJywgJ2xhc3Rtb2RpZmllZGRhdGUnLCAnbGFzdHJlZmVyZW5jZWRkYXRlJywgJ2xhc3RjdXJlcXVlc3RkYXRlJywgJ2xhc3RjdXVwZGF0ZWRhdGUnLCAnbGFzdHZpZXdlZGRhdGUnLCAnbGVhZHNvdXJjZScsICdtYWlsaW5nc3RyZWV0JywgJ21haWxpbmdjaXR5JywgJ21haWxpbmdzdGF0ZScsICdtYWlsaW5ncG9zdGFsY29kZScsICdtYWlsaW5nY291bnRyeScsICdtYWlsaW5nbGF0aXR1ZGUnLCAnbWFpbGluZ2xvbmdpdHVkZScsICdtb2JpbGVwaG9uZScsICdzYWx1dGF0aW9uJywgJ2ZpcnN0bmFtZScsICdsYXN0bmFtZScsICdvdGhlcnN0cmVldCcsICdvdGhlcmNpdHknLCAnb3RoZXJzdGF0ZScsICdvdGhlcnBvc3RhbGNvZGUnLCAnb3RoZXJjb3VudHJ5JywgJ290aGVycGhvbmUnLCAnb3RoZXJsYXRpdHVkZScsICdvdGhlcmxvbmdpdHVkZScsICdwaG9uZScsICdwaG90b3VybCcsICdjb25uZWN0aW9ucmVjZWl2ZWRpZCcsICdyZXBvcnRzdG9pZCcsICdjb25uZWN0aW9uc2VudGlkJywgJ3N5c3RlbW1vZHN0YW1wJywgJ3RpdGxlJ10sXG4gIGV2ZW50OiBbJ2FjY291bnRpZCcsICdjdXJyZW5jeWlzb2NvZGUnLCAnaWQnLCAnaXNhbGxkYXlldmVudCcsICdpc2FyY2hpdmVkJywgJ293bmVyaWQnLCAnaXNyZWN1cnJlbmNlJywgJ2NyZWF0ZWRieWlkJywgJ2NyZWF0ZWRkYXRlJywgJ2FjdGl2aXR5ZGF0ZScsICdpc2RlbGV0ZWQnLCAnZGVzY3JpcHRpb24nLCAnZGl2aXNpb24nLCAnZHVyYXRpb25pbm1pbnV0ZXMnLCAnZW5kZGF0ZXRpbWUnLCAncmVjdXJyZW5jZWVuZGRhdGVvbmx5JywgJ2dyb3VwZXZlbnR0eXBlJywgJ2lzY2hpbGQnLCAnaXNncm91cGV2ZW50JywgJ2xhc3Rtb2RpZmllZGJ5aWQnLCAnbGFzdG1vZGlmaWVkZGF0ZScsICdsb2NhdGlvbicsICd3aG9pZCcsICdpc3ByaXZhdGUnLCAnaXN2aXNpYmxlaW5zZWxmc2VydmljZScsICdyZWN1cnJlbmNlYWN0aXZpdHlpZCcsICdyZWN1cnJlbmNlZGF5b2Ztb250aCcsICdyZWN1cnJlbmNlZGF5b2Z3ZWVrbWFzaycsICdyZWN1cnJlbmNlaW5zdGFuY2UnLCAncmVjdXJyZW5jZWludGVydmFsJywgJ3JlY3VycmVuY2Vtb250aG9meWVhcicsICdyZWN1cnJlbmNldGltZXpvbmVzaWRrZXknLCAncmVjdXJyZW5jZXR5cGUnLCAnd2hhdGlkJywgJ3JlbWluZGVyZGF0ZXRpbWUnLCAnaXNyZW1pbmRlcnNldCcsICdzaG93YXMnLCAnc3RhcnRkYXRldGltZScsICdyZWN1cnJlbmNlc3RhcnRkYXRldGltZScsICdzdWJqZWN0JywgJ3N5c3RlbW1vZHN0YW1wJywgJ2FjdGl2aXR5ZGF0ZXRpbWUnLCAndHlwZSddLFxuICB0YXNrOiBbJ2FjY291bnRpZCcsICdjdXJyZW5jeWlzb2NvZGUnLCAnaWQnLCAnaXNhcmNoaXZlZCcsICdvd25lcmlkJywgJ2NhbGxkdXJhdGlvbmluc2Vjb25kcycsICdjYWxsb2JqZWN0JywgJ2NhbGxkaXNwb3NpdGlvbicsICdjYWxsdHlwZScsICdpc2Nsb3NlZCcsICdkZXNjcmlwdGlvbicsICdpc3JlY3VycmVuY2UnLCAnY3JlYXRlZGJ5aWQnLCAnY3JlYXRlZGRhdGUnLCAnaXNkZWxldGVkJywgJ2RpdmlzaW9uJywgJ2FjdGl2aXR5ZGF0ZScsICdyZWN1cnJlbmNlZW5kZGF0ZW9ubHknLCAnbGFzdG1vZGlmaWVkYnlpZCcsICdsYXN0bW9kaWZpZWRkYXRlJywgJ3dob2lkJywgJ3ByaW9yaXR5JywgJ2lzdmlzaWJsZWluc2VsZnNlcnZpY2UnLCAnY29ubmVjdGlvbnJlY2VpdmVkaWQnLCAncmVjdXJyZW5jZWFjdGl2aXR5aWQnLCAncmVjdXJyZW5jZWRheW9mbW9udGgnLCAncmVjdXJyZW5jZWRheW9md2Vla21hc2snLCAncmVjdXJyZW5jZWluc3RhbmNlJywgJ3JlY3VycmVuY2VpbnRlcnZhbCcsICdyZWN1cnJlbmNlbW9udGhvZnllYXInLCAncmVjdXJyZW5jZXRpbWV6b25lc2lka2V5JywgJ3JlY3VycmVuY2V0eXBlJywgJ3doYXRpZCcsICdyZW1pbmRlcmRhdGV0aW1lJywgJ2lzcmVtaW5kZXJzZXQnLCAncmVjdXJyZW5jZXJlZ2VuZXJhdGVkdHlwZScsICdjb25uZWN0aW9uc2VudGlkJywgJ3JlY3VycmVuY2VzdGFydGRhdGVvbmx5JywgJ3N0YXR1cycsICdzdWJqZWN0JywgJ3N5c3RlbW1vZHN0YW1wJywgJ3R5cGUnXSxcbiAgdXNlcjogWydhYm91dG1lJywgJ2FjY291bnRpZCcsICdhZGRyZXNzJywgJ2FsaWFzJywgJ2JhZGdldGV4dCcsICdjYWxsY2VudGVyaWQnLCAnY2l0eScsICdjb21tdW5pdHluaWNrbmFtZScsICdjb21wYW55bmFtZScsICdjb250YWN0aWQnLCAnY291bnRyeScsICdjb3VudHJ5Y29kZScsICdjdXJyZW50c3RhdHVzJywgJ2RlZmF1bHRjdXJyZW5jeWlzb2NvZGUnLCAnZGVmYXVsdGRpdmlzaW9uJywgJ2RlZmF1bHRncm91cG5vdGlmaWNhdGlvbmZyZXF1ZW5jeScsICdkZWxlZ2F0ZWRhcHByb3ZlcmlkJywgJ2RlcGFydG1lbnQnLCAnZGlnZXN0ZnJlcXVlbmN5JywgJ2RpdmlzaW9uJywgJ2VtYWlsJywgJ2VtYWlsZW5jb2RpbmdrZXknLCAnZW1haWxwcmVmZXJlbmNlc2F1dG9iY2MnLCAnZW1haWxwcmVmZXJlbmNlc2F1dG9iY2NzdGF5aW50b3VjaCcsICdlbWFpbHByZWZlcmVuY2Vzc3RheWludG91Y2hyZW1pbmRlcicsICdlbXBsb3llZW51bWJlcicsICdleHRlbnNpb24nLCAnZmF4JywgJ2ZlZGVyYXRpb25pZGVudGlmaWVyJywgJ2ZpcnN0bmFtZScsICdmb3JlY2FzdGVuYWJsZWQnLCAnZnVsbHBob3RvdXJsJywgJ2lzYWN0aXZlJywgJ2lzcGFydG5lcicsICdpc3BvcnRhbGVuYWJsZWQnLCAnaXNwb3J0YWxzZWxmcmVnaXN0ZXJlZCcsICdpc3BybXN1cGVydXNlcicsICdqaWdzYXdpbXBvcnRsaW1pdG92ZXJyaWRlJywgJ2xhbmd1YWdlbG9jYWxla2V5JywgJ2xhc3Rsb2dpbmRhdGUnLCAnbGFzdHBhc3N3b3JkY2hhbmdlZGF0ZScsICdsYXN0bmFtZScsICdsYXN0cmVmZXJlbmNlZGRhdGUnLCAnbGFzdHZpZXdlZGRhdGUnLCAnbGF0aXR1ZGUnLCAnbG9jYWxlc2lka2V5JywgJ2xvbmdpdHVkZScsICdtYW5hZ2VyJywgJ21hbmFnZXJpZCcsICdtaWRkbGVuYW1lJywgJ21vYmlsZXBob25lJywgJ25hbWUnLCAnb2ZmbGluZXRyaWFsZXhwaXJhdGlvbmRhdGUnLCAnb2ZmbGluZXBkYXRyaWFsZXhwaXJhdGlvbmRhdGUnLCAncGhvbmUnLCAncG9ydGFscm9sZScsICdwb3N0YWxjb2RlJywgJ3Byb2ZpbGVpZCcsICdyZWNlaXZlc2FkbWluaW5mb2VtYWlscycsICdyZWNlaXZlc2luZm9lbWFpbHMnLCAnc2VuZGVyZW1haWwnLCAnc2VuZGVybmFtZScsICdzaWduYXR1cmUnLCAnc21hbGxwaG90b3VybCcsICdzdGF0ZScsICdzdGF0ZWNvZGUnLCAnc3RheWludG91Y2hub3RlJywgJ3N0YXlpbnRvdWNoc2lnbmF0dXJlJywgJ3N0YXlpbnRvdWNoc3ViamVjdCcsICdzdHJlZXQnLCAnc3VmZml4JywgJ3RpbWV6b25lc2lka2V5JywgJ3RpdGxlJywgJ3VzZXJuYW1lJywgJ3VzZXJwZXJtaXNzaW9uc2NhbGxjZW50ZXJhdXRvbG9naW4nLCAndXNlcnBlcm1pc3Npb25zY2hhdHRlcmFuc3dlcnN1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc2ludGVyYWN0aW9udXNlcicsICd1c2VycGVybWlzc2lvbnNqaWdzYXdwcm9zcGVjdGluZ3VzZXInLCAndXNlcnBlcm1pc3Npb25za25vd2xlZGdldXNlcicsICd1c2VycGVybWlzc2lvbnNsaXZlYWdlbnR1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc21hcmtldGluZ3VzZXInLCAndXNlcnBlcm1pc3Npb25zbW9iaWxldXNlcicsICd1c2VycGVybWlzc2lvbnNvZmZsaW5ldXNlcicsICd1c2VycGVybWlzc2lvbnNzZmNvbnRlbnR1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc3NpdGVmb3JjZWNvbnRyaWJ1dG9ydXNlcicsICd1c2VycGVybWlzc2lvbnNzaXRlZm9yY2VwdWJsaXNoZXJ1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc3N1cHBvcnR1c2VyJywgJ3VzZXJwZXJtaXNzaW9uc3dpcmVsZXNzdXNlcicsICd1c2VycGVybWlzc2lvbnN3b3JrZG90Y29tdXNlcmZlYXR1cmUnLCAndXNlcnByZWZlcmVuY2VzYWN0aXZpdHlyZW1pbmRlcnNwb3B1cCcsICd1c2VycHJlZmVyZW5jZXNhcGV4cGFnZXNkZXZlbG9wZXJtb2RlJywgJ3VzZXJwcmVmZXJlbmNlc2NvbnRlbnRlbWFpbGFzYW5kd2hlbicsICd1c2VycHJlZmVyZW5jZXNjb250ZW50bm9lbWFpbCcsICd1c2VycHJlZmVyZW5jZXNlbmFibGVhdXRvc3ViZm9yZmVlZHMnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWFsbGZlZWRzZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWF1dG9zdWJmb3JmZWVkcycsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlYm9va21hcmtlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlY2hhbmdlY29tbWVudGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVlbmRvcnNlbWVudGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVmaWxlc2hhcmVub3RpZmljYXRpb25zZm9yYXBpJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVsYXRlcmNvbW1lbnRlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlbGlrZWVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVtZW50aW9uc3Bvc3RlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlcHJvZmlsZXBvc3RlbWFpbCcsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlc2hhcmVwb3N0ZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZWZlZWRiYWNrZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzY29tbWVudGFmdGVybGlrZWVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc21lbnRpb25zY29tbWVudGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGVtZXNzYWdlZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzYWJsZXJld2FyZGVtYWlsJywgJ3VzZXJwcmVmZXJlbmNlc2Rpc2FibGV3b3JrZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZGlzcHJvZnBvc3Rjb21tZW50ZW1haWwnLCAndXNlcnByZWZlcmVuY2VzZXZlbnRyZW1pbmRlcnNjaGVja2JveGRlZmF1bHQnLCAndXNlcnByZWZlcmVuY2VzaGlkZWNoYXR0ZXJvbmJvYXJkaW5nc3BsYXNoJywgJ3VzZXJwcmVmZXJlbmNlc2hpZGVjc25kZXNrdG9wdGFzaycsICd1c2VycHJlZmVyZW5jZXNoaWRlY3NuZ2V0Y2hhdHRlcm1vYmlsZXRhc2snLCAndXNlcnByZWZlcmVuY2VzaGlkZXNlY29uZGNoYXR0ZXJvbmJvYXJkaW5nc3BsYXNoJywgJ3VzZXJwcmVmZXJlbmNlc2hpZGVzMWJyb3dzZXJ1aScsICd1c2VycHJlZmVyZW5jZXNqaWdzYXdsaXN0dXNlcicsICd1c2VycHJlZmVyZW5jZXNvcHRvdXRvZnRvdWNoJywgJ3VzZXJwcmVmZXJlbmNlc3Byb2Nlc3Nhc3Npc3RhbnRjb2xsYXBzZWQnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NpdHl0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NpdHl0b2d1ZXN0dXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NvdW50cnl0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2NvdW50cnl0b2d1ZXN0dXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd2VtYWlsdG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dmYXh0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd21hbmFnZXJ0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd21vYmlsZXBob25ldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dwb3N0YWxjb2RldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dwb3N0YWxjb2RldG9ndWVzdHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3dzdGF0ZXRvZXh0ZXJuYWx1c2VycycsICd1c2VycHJlZmVyZW5jZXNzaG93c3RhdGV0b2d1ZXN0dXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd3N0cmVldGFkZHJlc3N0b2V4dGVybmFsdXNlcnMnLCAndXNlcnByZWZlcmVuY2Vzc2hvd3RpdGxldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Nob3d0aXRsZXRvZ3Vlc3R1c2VycycsICd1c2VycHJlZmVyZW5jZXNzaG93d29ya3Bob25ldG9leHRlcm5hbHVzZXJzJywgJ3VzZXJwcmVmZXJlbmNlc3Rhc2tyZW1pbmRlcnNjaGVja2JveGRlZmF1bHQnLCAndXNlcnByZWZlcmVuY2VzcmVtaW5kZXJzb3VuZG9mZicsICd1c2VycHJlZmVyZW5jZXNkaXNhYmxlZm9sbG93ZXJzZW1haWwnLCAndXNlcnByZWZlcmVuY2Vzc2hvd3Byb2ZpbGVwaWN0b2d1ZXN0dXNlcnMnLCAndXNlcnJvbGVpZCcsICd1c2VydHlwZScsICd3aXJlbGVzc2VtYWlsJ11cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJylcbi5mYWN0b3J5ICdub3JtYWxpemVTYWxlc2ZvcmNlJywgKFxuICBhbnNTYWxlc2ZvcmNlU09iamVjdHMsXG4gIGFuc1NhbGVzZm9yY2VTdGFuZGFyZE9iamVjdHMsXG4gIGFuc1NhbGVzZm9yY2VTdGFuZGFyZEZpZWxkc1xuKSAtPlxuICBuZXcgY2xhc3MgTm9ybWFsaXplU2FsZXNmb3JjZVxuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgQHN0YW5kYXJkRmllbGRzID0gYW5zU2FsZXNmb3JjZVN0YW5kYXJkRmllbGRzXG4gICAgICBAc3RhbmRhcmRPYmplY3RzID0gYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0c1xuICAgICAgQHNPYmplY3RGaWVsZHMgPSBhbnNTYWxlc2ZvcmNlU09iamVjdHNcblxuICAgIG5vcm1hbGl6ZTogKHBhcnQpID0+XG4gICAgICBpZiBfLmlzTnVsbChwYXJ0KSB8fCBfLmlzVW5kZWZpbmVkKHBhcnQpXG4gICAgICAgIHJldHVybiBpZiBfLmlzTnVsbChwYXJ0KSB0aGVuIG51bGwgZWxzZSB1bmRlZmluZWRcblxuICAgICAgdHlwZV9uYW1lID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhcnQpXG5cbiAgICAgIHN3aXRjaFxuICAgICAgICB3aGVuIF8ocGFydCkuaXNTdHJpbmcoKSB0aGVuIEBfbm9ybWFsaXplU3RyaW5nKHBhcnQpXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc0FycmF5KCkgIHRoZW4gQF9ub3JtYWxpemVBcnJheShwYXJ0KVxuICAgICAgICB3aGVuIF8ocGFydCkuaXNPYmplY3QoKSB0aGVuIEBfbm9ybWFsaXplT2JqZWN0KHBhcnQpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIlR5cGUgI3t0eXBlX25hbWV9IG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgICAgICBPbmx5IFN0cmluZywgQXJyYXkgYW5kIE9iamVjdCBhcmUgc3VwcG9ydGVkLlwiXG4gICAgICAgICAgKVxuXG4gICAgZGVub3JtYWxpemU6IChwYXJ0LCBzT2JqZWN0LCBtYXA9e30pID0+XG4gICAgICB0eXBlX25hbWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocGFydClcblxuICAgICAgc3dpdGNoXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc1N0cmluZygpIHRoZW4gQF9kZW5vcm1hbGl6ZVN0cmluZyhwYXJ0LCBzT2JqZWN0LCBtYXApXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc0FycmF5KCkgIHRoZW4gQF9kZW5vcm1hbGl6ZUFycmF5KHBhcnQsIHNPYmplY3QpXG4gICAgICAgIHdoZW4gXyhwYXJ0KS5pc09iamVjdCgpIHRoZW4gQF9kZW5vcm1hbGl6ZU9iamVjdChwYXJ0LCBzT2JqZWN0KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJUeXBlICN7dHlwZV9uYW1lfSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgICAgT25seSBTdHJpbmcsIEFycmF5IGFuZCBPYmplY3QgYXJlIHN1cHBvcnRlZC5cIlxuICAgICAgICAgIClcblxuICAgIGRlbm9ybWFsaXplT2JqZWN0TmFtZTogKG5hbWUpID0+XG4gICAgICBAX2Rlbm9ybWFsaXplIG5hbWUsIEBzdGFuZGFyZE9iamVjdHNcblxuICAgICMgUFJJVkFURSAtLS0tLS0tLS0tXG5cbiAgICBfbm9ybWFsaXplU3RyaW5nOiAoc3RyaW5nKSAtPlxuICAgICAgc3RyaW5nLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvX19jJC8sICcnKVxuXG4gICAgX25vcm1hbGl6ZUFycmF5OiAoYXJyYXkpID0+XG4gICAgICBfLm1hcCBhcnJheSwgKGVsZW1lbnQpID0+XG4gICAgICAgIEBub3JtYWxpemUoZWxlbWVudClcblxuICAgIF9ub3JtYWxpemVPYmplY3Q6IChvYmplY3QpID0+XG4gICAgICBub3JtYWxpemVkID0ge31cblxuICAgICAgXy5lYWNoIG9iamVjdCwgKHZhbHVlLCBrZXkpID0+XG4gICAgICAgIGlmIF8odmFsdWUpLmlzT2JqZWN0KCkgJiYgIV8odmFsdWUpLmlzRnVuY3Rpb24oKVxuICAgICAgICAgIG5vcm1hbGl6ZWRbQG5vcm1hbGl6ZShrZXkpXSA9IEBub3JtYWxpemUodmFsdWUpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBub3JtYWxpemVkW0Bub3JtYWxpemUoa2V5KV0gPSB2YWx1ZVxuICAgICAgICB0cnVlXG5cbiAgICAgIG5vcm1hbGl6ZWRcblxuICAgIF9kZW5vcm1hbGl6ZTogKHBhcnQsIGF2b2lkTGlzdCwgcHJlZml4PXVuZGVmaW5lZCkgLT5cbiAgICAgIHVubGVzcyBfKGF2b2lkTGlzdCkuY29udGFpbnMocGFydClcbiAgICAgICAgaWYgcHJlZml4IHRoZW4gXCIje3ByZWZpeH0uI3twYXJ0fV9fY1wiIGVsc2UgXCIje3BhcnR9X19jXCJcbiAgICAgIGVsc2VcbiAgICAgICAgaWYgcHJlZml4IHRoZW4gXCIje3ByZWZpeH0uI3twYXJ0fVwiIGVsc2UgcGFydFxuXG4gICAgX2Rlbm9ybWFsaXplU3RyaW5nOiAoc3RyaW5nLCBzT2JqZWN0LCBtYXApID0+XG4gICAgICBzdHJpbmdQYXJ0cyA9IHN0cmluZy5zcGxpdCgnLicpXG4gICAgICBpZiBzdHJpbmdQYXJ0cy5sZW5ndGggPiAxICYmIF8uaGFzKG1hcCxzdHJpbmdQYXJ0c1swXSlcbiAgICAgICAgcGFyZW50UmVmID0gc3RyaW5nUGFydHNbMF1cbiAgICAgICAgc3RyaW5nID0gc3RyaW5nUGFydHNbMV1cbiAgICAgICAgc09iamVjdCA9IEBub3JtYWxpemUobWFwW3BhcmVudFJlZl0pXG4gICAgICBlbHNlXG4gICAgICAgIHN0cmluZyA9IHN0cmluZ1BhcnRzWzBdXG4gICAgICAgIHNPYmplY3QgPSBAbm9ybWFsaXplKHNPYmplY3QpXG5cbiAgICAgIHN0YW5kYXJkRmllbGRzID0gQHN0YW5kYXJkRmllbGRzXG4gICAgICBpZiBfKEBzT2JqZWN0RmllbGRzKS5oYXMoc09iamVjdClcbiAgICAgICAgc3RhbmRhcmRGaWVsZHMgPSBfLnVuaXEoc3RhbmRhcmRGaWVsZHMuY29uY2F0KEBzT2JqZWN0RmllbGRzW3NPYmplY3RdKSlcblxuICAgICAgQF9kZW5vcm1hbGl6ZSBzdHJpbmcsIHN0YW5kYXJkRmllbGRzLCBwYXJlbnRSZWZcblxuICAgIF9kZW5vcm1hbGl6ZUFycmF5OiAoYXJyYXksIHNPYmplY3QpID0+XG4gICAgICBfLm1hcCBhcnJheSwgKGVsZW1lbnQpID0+XG4gICAgICAgIEBkZW5vcm1hbGl6ZShlbGVtZW50LCBzT2JqZWN0KVxuXG4gICAgX2Rlbm9ybWFsaXplT2JqZWN0OiAob2JqZWN0LCBzT2JqZWN0KSA9PlxuICAgICAgZGVub3JtYWxpemVkID0ge31cblxuICAgICAgXy5lYWNoIG9iamVjdCwgKHZhbHVlLCBrZXkpID0+XG4gICAgICAgIGlmIF8odmFsdWUpLmlzT2JqZWN0KCkgJiYgIV8odmFsdWUpLmlzRnVuY3Rpb24oKVxuICAgICAgICAgIGRlbm9ybWFsaXplZFtAZGVub3JtYWxpemUoa2V5LCBzT2JqZWN0KV0gPSBAZGVub3JtYWxpemUoXG4gICAgICAgICAgICB2YWx1ZSwgc09iamVjdFxuICAgICAgICAgIClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGRlbm9ybWFsaXplZFtAZGVub3JtYWxpemUoa2V5LCBzT2JqZWN0KV0gPSB2YWx1ZVxuICAgICAgICB0cnVlXG5cbiAgICAgIGRlbm9ybWFsaXplZFxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIF9fYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH07XG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLW5vcm1hbGl6ZS1zYWxlc2ZvcmNlJykuZmFjdG9yeSgnbm9ybWFsaXplU2FsZXNmb3JjZScsIGZ1bmN0aW9uKGFuc1NhbGVzZm9yY2VTT2JqZWN0cywgYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0cywgYW5zU2FsZXNmb3JjZVN0YW5kYXJkRmllbGRzKSB7XG4gIHZhciBOb3JtYWxpemVTYWxlc2ZvcmNlO1xuICByZXR1cm4gbmV3IChOb3JtYWxpemVTYWxlc2ZvcmNlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIE5vcm1hbGl6ZVNhbGVzZm9yY2UoKSB7XG4gICAgICB0aGlzLl9kZW5vcm1hbGl6ZU9iamVjdCA9IF9fYmluZCh0aGlzLl9kZW5vcm1hbGl6ZU9iamVjdCwgdGhpcyk7XG4gICAgICB0aGlzLl9kZW5vcm1hbGl6ZUFycmF5ID0gX19iaW5kKHRoaXMuX2Rlbm9ybWFsaXplQXJyYXksIHRoaXMpO1xuICAgICAgdGhpcy5fZGVub3JtYWxpemVTdHJpbmcgPSBfX2JpbmQodGhpcy5fZGVub3JtYWxpemVTdHJpbmcsIHRoaXMpO1xuICAgICAgdGhpcy5fbm9ybWFsaXplT2JqZWN0ID0gX19iaW5kKHRoaXMuX25vcm1hbGl6ZU9iamVjdCwgdGhpcyk7XG4gICAgICB0aGlzLl9ub3JtYWxpemVBcnJheSA9IF9fYmluZCh0aGlzLl9ub3JtYWxpemVBcnJheSwgdGhpcyk7XG4gICAgICB0aGlzLmRlbm9ybWFsaXplT2JqZWN0TmFtZSA9IF9fYmluZCh0aGlzLmRlbm9ybWFsaXplT2JqZWN0TmFtZSwgdGhpcyk7XG4gICAgICB0aGlzLmRlbm9ybWFsaXplID0gX19iaW5kKHRoaXMuZGVub3JtYWxpemUsIHRoaXMpO1xuICAgICAgdGhpcy5ub3JtYWxpemUgPSBfX2JpbmQodGhpcy5ub3JtYWxpemUsIHRoaXMpO1xuICAgICAgdGhpcy5zdGFuZGFyZEZpZWxkcyA9IGFuc1NhbGVzZm9yY2VTdGFuZGFyZEZpZWxkcztcbiAgICAgIHRoaXMuc3RhbmRhcmRPYmplY3RzID0gYW5zU2FsZXNmb3JjZVN0YW5kYXJkT2JqZWN0cztcbiAgICAgIHRoaXMuc09iamVjdEZpZWxkcyA9IGFuc1NhbGVzZm9yY2VTT2JqZWN0cztcbiAgICB9XG5cbiAgICBOb3JtYWxpemVTYWxlc2ZvcmNlLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICB2YXIgdHlwZV9uYW1lO1xuICAgICAgaWYgKF8uaXNOdWxsKHBhcnQpIHx8IF8uaXNVbmRlZmluZWQocGFydCkpIHtcbiAgICAgICAgaWYgKF8uaXNOdWxsKHBhcnQpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHlwZV9uYW1lID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhcnQpO1xuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzU3RyaW5nKCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZVN0cmluZyhwYXJ0KTtcbiAgICAgICAgY2FzZSAhXyhwYXJ0KS5pc0FycmF5KCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZUFycmF5KHBhcnQpO1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzT2JqZWN0KCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZU9iamVjdChwYXJ0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlIFwiICsgdHlwZV9uYW1lICsgXCIgbm90IHN1cHBvcnRlZC4gT25seSBTdHJpbmcsIEFycmF5IGFuZCBPYmplY3QgYXJlIHN1cHBvcnRlZC5cIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLmRlbm9ybWFsaXplID0gZnVuY3Rpb24ocGFydCwgc09iamVjdCwgbWFwKSB7XG4gICAgICB2YXIgdHlwZV9uYW1lO1xuICAgICAgaWYgKG1hcCA9PSBudWxsKSB7XG4gICAgICAgIG1hcCA9IHt9O1xuICAgICAgfVxuICAgICAgdHlwZV9uYW1lID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBhcnQpO1xuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzU3RyaW5nKCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9ybWFsaXplU3RyaW5nKHBhcnQsIHNPYmplY3QsIG1hcCk7XG4gICAgICAgIGNhc2UgIV8ocGFydCkuaXNBcnJheSgpOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9kZW5vcm1hbGl6ZUFycmF5KHBhcnQsIHNPYmplY3QpO1xuICAgICAgICBjYXNlICFfKHBhcnQpLmlzT2JqZWN0KCk6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9ybWFsaXplT2JqZWN0KHBhcnQsIHNPYmplY3QpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR5cGUgXCIgKyB0eXBlX25hbWUgKyBcIiBub3Qgc3VwcG9ydGVkLiBPbmx5IFN0cmluZywgQXJyYXkgYW5kIE9iamVjdCBhcmUgc3VwcG9ydGVkLlwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgTm9ybWFsaXplU2FsZXNmb3JjZS5wcm90b3R5cGUuZGVub3JtYWxpemVPYmplY3ROYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9ybWFsaXplKG5hbWUsIHRoaXMuc3RhbmRhcmRPYmplY3RzKTtcbiAgICB9O1xuXG4gICAgTm9ybWFsaXplU2FsZXNmb3JjZS5wcm90b3R5cGUuX25vcm1hbGl6ZVN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL19fYyQvLCAnJyk7XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLl9ub3JtYWxpemVBcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICByZXR1cm4gXy5tYXAoYXJyYXksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5ub3JtYWxpemUoZWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLl9ub3JtYWxpemVPYmplY3QgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBub3JtYWxpemVkO1xuICAgICAgbm9ybWFsaXplZCA9IHt9O1xuICAgICAgXy5lYWNoKG9iamVjdCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKF8odmFsdWUpLmlzT2JqZWN0KCkgJiYgIV8odmFsdWUpLmlzRnVuY3Rpb24oKSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFtfdGhpcy5ub3JtYWxpemUoa2V5KV0gPSBfdGhpcy5ub3JtYWxpemUodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVkW190aGlzLm5vcm1hbGl6ZShrZXkpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH07XG5cbiAgICBOb3JtYWxpemVTYWxlc2ZvcmNlLnByb3RvdHlwZS5fZGVub3JtYWxpemUgPSBmdW5jdGlvbihwYXJ0LCBhdm9pZExpc3QsIHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCA9PSBudWxsKSB7XG4gICAgICAgIHByZWZpeCA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmICghXyhhdm9pZExpc3QpLmNvbnRhaW5zKHBhcnQpKSB7XG4gICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIFwiLlwiICsgcGFydCArIFwiX19jXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCIgKyBwYXJ0ICsgXCJfX2NcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgIHJldHVybiBcIlwiICsgcHJlZml4ICsgXCIuXCIgKyBwYXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIE5vcm1hbGl6ZVNhbGVzZm9yY2UucHJvdG90eXBlLl9kZW5vcm1hbGl6ZVN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZywgc09iamVjdCwgbWFwKSB7XG4gICAgICB2YXIgcGFyZW50UmVmLCBzdGFuZGFyZEZpZWxkcywgc3RyaW5nUGFydHM7XG4gICAgICBzdHJpbmdQYXJ0cyA9IHN0cmluZy5zcGxpdCgnLicpO1xuICAgICAgaWYgKHN0cmluZ1BhcnRzLmxlbmd0aCA+IDEgJiYgXy5oYXMobWFwLCBzdHJpbmdQYXJ0c1swXSkpIHtcbiAgICAgICAgcGFyZW50UmVmID0gc3RyaW5nUGFydHNbMF07XG4gICAgICAgIHN0cmluZyA9IHN0cmluZ1BhcnRzWzFdO1xuICAgICAgICBzT2JqZWN0ID0gdGhpcy5ub3JtYWxpemUobWFwW3BhcmVudFJlZl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nUGFydHNbMF07XG4gICAgICAgIHNPYmplY3QgPSB0aGlzLm5vcm1hbGl6ZShzT2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHN0YW5kYXJkRmllbGRzID0gdGhpcy5zdGFuZGFyZEZpZWxkcztcbiAgICAgIGlmIChfKHRoaXMuc09iamVjdEZpZWxkcykuaGFzKHNPYmplY3QpKSB7XG4gICAgICAgIHN0YW5kYXJkRmllbGRzID0gXy51bmlxKHN0YW5kYXJkRmllbGRzLmNvbmNhdCh0aGlzLnNPYmplY3RGaWVsZHNbc09iamVjdF0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9kZW5vcm1hbGl6ZShzdHJpbmcsIHN0YW5kYXJkRmllbGRzLCBwYXJlbnRSZWYpO1xuICAgIH07XG5cbiAgICBOb3JtYWxpemVTYWxlc2ZvcmNlLnByb3RvdHlwZS5fZGVub3JtYWxpemVBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCBzT2JqZWN0KSB7XG4gICAgICByZXR1cm4gXy5tYXAoYXJyYXksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5kZW5vcm1hbGl6ZShlbGVtZW50LCBzT2JqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgTm9ybWFsaXplU2FsZXNmb3JjZS5wcm90b3R5cGUuX2Rlbm9ybWFsaXplT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBzT2JqZWN0KSB7XG4gICAgICB2YXIgZGVub3JtYWxpemVkO1xuICAgICAgZGVub3JtYWxpemVkID0ge307XG4gICAgICBfLmVhY2gob2JqZWN0LCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBpZiAoXyh2YWx1ZSkuaXNPYmplY3QoKSAmJiAhXyh2YWx1ZSkuaXNGdW5jdGlvbigpKSB7XG4gICAgICAgICAgICBkZW5vcm1hbGl6ZWRbX3RoaXMuZGVub3JtYWxpemUoa2V5LCBzT2JqZWN0KV0gPSBfdGhpcy5kZW5vcm1hbGl6ZSh2YWx1ZSwgc09iamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbm9ybWFsaXplZFtfdGhpcy5kZW5vcm1hbGl6ZShrZXksIHNPYmplY3QpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHJldHVybiBkZW5vcm1hbGl6ZWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBOb3JtYWxpemVTYWxlc2ZvcmNlO1xuXG4gIH0pKCkpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=