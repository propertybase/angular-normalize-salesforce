{"version":3,"sources":["angular-normalize-salesforce.coffee","salesforce-standard-fields.coffee","salesforce-standard-objects.coffee","salesforce-sobjects.coffee","salesforce-sobjects.js","normalize-salesforce.coffee","normalize-salesforce.js"],"names":[],"mappings":"AAAA;AAAA;;ACAA;AAAA;;ACAA;AAAA;;ACAA;AAAA;EAIE;EAkDA;AClDF;;ACJA;AAAA;EAAA;;AAAA,wDAGS,mBAAA;EAEQ;IAKX;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IACA;IACA;EAPW;;EAAb;IAUE;IAAA;IAEA;MAAA;QCOE;MDPF;QCSE;MDTF;QCWE;MDXF;QAKI;IALJ;EAHS;;EATX;IAuBE;IAAA;IAEA;MAAA;QCSE;MDTF;QCWE;MDXF;QCaE;MDbF;QAKI;IALJ;EAHW;;EAtBb;IC6CA;EDVuB;;EAnCvB;ICiDA;EDTkB;;EAxClB;ICqDA;MACE;QACE;MDXW;IAAA;EADE;;EA3CjB;IAgDE;IAAA;IAEA;MCcA;QDbE;UCeE;QACF;UACE;QACF;MDnBgB;IAAA;ICsBpB;EDzBkB;;EA/ClB;IA2DE;MCkBA;IACF;MACE;IACF;EDtBc;;EA1Dd;IAiEE;IAAA;IAEA;IACA;MACE;ICoBJ;IACA;ED1BoB;;EAhEpB;IC8FA;MACE;QACE;MDtBW;IAAA;EADI;;EAzEnB;IA8EE;IAAA;IAEA;MCyBA;QDxBE;UC0BE;QACF;UACE;QACF;MD9BgB;IAAA;ICiCpB;EDpCoB;;ECuCtB;;AAEF","file":"angular-normalize-salesforce.js","sourcesContent":["'use strict'\n\nangular.module('angular-normalize-salesforce',[])\n","'use strict'\n\nangular.module('angular-normalize-salesforce')\n.constant 'ansSalesforceStandardFields', [\n  'id'\n  'isdeleted'\n  'name'\n  'createddate'\n  'createdbyid'\n  'lastmodifieddate'\n  'lastmodifiedbyid'\n  'systemmodstamp'\n  'lastactivitydate'\n  'currencyisocode'\n]\n","'use strict'\n\nangular.module('angular-normalize-salesforce')\n.constant 'ansSalesforceStandardObjects', [\n  \"acceptedeventrelation\",\"account\",\n  \"accountcontactrole\",\"accountfeed\",\"accounthistory\",\"accountpartner\",\n  \"accountshare\",\"activityhistory\",\"additionalnumber\",\"aggregateresult\",\n  \"announcement\",\"apexclass\",\"apexcomponent\",\"apexpage\",\n  \"apextestqueueitem\",\"apextestresult\",\"apextrigger\",\"appmenuitem\",\n  \"assignmentrule\",\"asyncapexjob\",\"attachedcontentdocument\",\"attachment\",\n  \"authsession\",\"brandtemplate\",\"businesshours\",\"businessprocess\",\n  \"callcenter\",\"categorynode\",\"chatteractivity\",\"clientbrowser\",\n  \"collaborationgroup\",\"collaborationgroupfeed\",\n  \"collaborationgroupmember\",\"collaborationgroupmemberrequest\",\n  \"collaborationinvitation\",\"combinedattachment\",\"community\",\"contact\",\n  \"contactfeed\",\"contacthistory\",\"contactshare\",\"contentdocument\",\n  \"contentdocumentfeed\",\"contentdocumenthistory\",\"contentdocumentlink\",\n  \"contentversion\",\"contentversionhistory\",\"cronjobdetail\",\"crontrigger\",\n  \"dashboard\",\"dashboardcomponent\",\"dashboardcomponentfeed\",\n  \"dashboardfeed\",\"declinedeventrelation\",\"document\",\n  \"documentattachmentmap\",\"domain\",\"domainsite\",\"emailservicesaddress\",\n  \"emailservicesfunction\",\"emailstatus\",\"emailtemplate\",\n  \"entitysubscription\",\"event\",\"eventfeed\",\"eventrelation\",\"feedcomment\",\n  \"feeditem\",\"feedlike\",\"feedtrackedchange\",\"fieldpermissions\",\n  \"fiscalyearsettings\",\"folder\",\"forecastshare\",\"group\",\"groupmember\",\n  \"hashtagdefinition\",\"holiday\",\"idea\",\"ideacomment\",\"loginip\",\n  \"mailmergetemplate\",\"mobiledeviceregistrar\",\"name\",\"note\",\n  \"noteandattachment\",\"objectpermissions\",\"openactivity\",\n  \"orgwideemailaddress\",\"ownedcontentdocument\",\"period\",\"permissionset\",\n  \"permissionsetassignment\",\"permissionsetlicense\",\n  \"permissionsetlicenseassign\",\"processdefinition\",\"processinstance\",\n  \"processinstancehistory\",\"processinstancenode\",\"processinstancestep\",\n  \"processinstanceworkitem\",\"processnode\",\"profile\",\"pushtopic\",\n  \"queuesobject\",\"recentlyviewed\",\"recordtype\",\"report\",\"reportfeed\",\n  \"scontrol\",\"setupentityaccess\",\"site\",\"sitefeed\",\"sitehistory\",\n  \"staticresource\",\"task\",\"taskfeed\",\"taskpriority\",\"taskstatus\",\"topic\",\n  \"topicassignment\",\"topicfeed\",\"undecidedeventrelation\",\"user\",\n  \"userfeed\",\"userlicense\",\"userpreference\",\"userprofile\",\n  \"userrecordaccess\",\"userrole\",\"usershare\",\"vote\"\n]\n","'use strict'\n\nangular.module('angular-normalize-salesforce')\n.constant 'ansSalesforceSObjects', {\n  account: [\n    'masterrecordid',\n    'currencyisocode',\n    'division',\n    'id',\n    'accountnumber',\n    'ownerid',\n    'recordtypeid',\n    'site',\n    'accountsource',\n    'annualrevenue',\n    'billingstreet',\n    'billingcity',\n    'billingstate',\n    'billingpostalcode',\n    'billingcountry',\n    'createdbyid',\n    'createddate',\n    'jigsaw',\n    'isdeleted',\n    'description',\n    'numberofemployees',\n    'isexcludedfromrealign',\n    'fax',\n    'industry',\n    'jigsawcompanyid',\n    'lastactivitydate',\n    'lastmodifiedbyid',\n    'lastmodifieddate',\n    'lastreferenceddate',\n    'lastvieweddate',\n    'ownership',\n    'parentid',\n    'phone',\n    'photourl',\n    'rating',\n    'connectionreceivedid',\n    'sic',\n    'sicdesc',\n    'connectionsentid',\n    'shippingstreet',\n    'shippingcity',\n    'shippingstate',\n    'shippingpostalcode',\n    'shippingcountry',\n    'systemmodstamp',\n    'tickersymbol',\n    'type',\n    'website'\n  ]\n  task: [\n    'accountid',\n    'currencyisocode',\n    'id',\n    'isarchived',\n    'ownerid',\n    'calldurationinseconds',\n    'callobject',\n    'calldisposition',\n    'calltype',\n    'isclosed',\n    'description',\n    'isrecurrence',\n    'createdbyid',\n    'createddate',\n    'isdeleted',\n    'division',\n    'activitydate',\n    'recurrenceenddateonly',\n    'lastmodifiedbyid',\n    'lastmodifieddate',\n    'whoid',\n    'priority',\n    'isvisibleinselfservice',\n    'connectionreceivedid',\n    'recurrenceactivityid',\n    'recurrencedayofmonth',\n    'recurrencedayofweekmask',\n    'recurrenceinstance',\n    'recurrenceinterval',\n    'recurrencemonthofyear',\n    'recurrencetimezonesidkey',\n    'recurrencetype',\n    'whatid',\n    'reminderdatetime',\n    'isreminderset',\n    'recurrenceregeneratedtype',\n    'connectionsentid',\n    'recurrencestartdateonly',\n    'status',\n    'subject',\n    'systemmodstamp',\n    'type'\n  ]\n}\n","'use strict';\nangular.module('angular-normalize-salesforce').constant('ansSalesforceSObjects', {\n  account: ['masterrecordid', 'currencyisocode', 'division', 'id', 'accountnumber', 'ownerid', 'recordtypeid', 'site', 'accountsource', 'annualrevenue', 'billingstreet', 'billingcity', 'billingstate', 'billingpostalcode', 'billingcountry', 'createdbyid', 'createddate', 'jigsaw', 'isdeleted', 'description', 'numberofemployees', 'isexcludedfromrealign', 'fax', 'industry', 'jigsawcompanyid', 'lastactivitydate', 'lastmodifiedbyid', 'lastmodifieddate', 'lastreferenceddate', 'lastvieweddate', 'ownership', 'parentid', 'phone', 'photourl', 'rating', 'connectionreceivedid', 'sic', 'sicdesc', 'connectionsentid', 'shippingstreet', 'shippingcity', 'shippingstate', 'shippingpostalcode', 'shippingcountry', 'systemmodstamp', 'tickersymbol', 'type', 'website'],\n  task: ['accountid', 'currencyisocode', 'id', 'isarchived', 'ownerid', 'calldurationinseconds', 'callobject', 'calldisposition', 'calltype', 'isclosed', 'description', 'isrecurrence', 'createdbyid', 'createddate', 'isdeleted', 'division', 'activitydate', 'recurrenceenddateonly', 'lastmodifiedbyid', 'lastmodifieddate', 'whoid', 'priority', 'isvisibleinselfservice', 'connectionreceivedid', 'recurrenceactivityid', 'recurrencedayofmonth', 'recurrencedayofweekmask', 'recurrenceinstance', 'recurrenceinterval', 'recurrencemonthofyear', 'recurrencetimezonesidkey', 'recurrencetype', 'whatid', 'reminderdatetime', 'isreminderset', 'recurrenceregeneratedtype', 'connectionsentid', 'recurrencestartdateonly', 'status', 'subject', 'systemmodstamp', 'type']\n});\n","'use strict'\n\nangular.module('angular-normalize-salesforce')\n.service 'normalizeSalesforce',\n  class NormalizeSalesforce\n    constructor: (\n      ansSalesforceSObjects,\n      ansSalesforceStandardObjects,\n      ansSalesforceStandardFields\n    ) ->\n      @standardFields = ansSalesforceStandardFields\n      @standardObjects = ansSalesforceStandardObjects\n      @sObjectFields = ansSalesforceSObjects\n\n    normalize: (part) =>\n      type_name = Object.prototype.toString.call(part)\n\n      switch\n        when _(part).isString() then @_normalizeString(part)\n        when _(part).isArray()  then @_normalizeArray(part)\n        when _(part).isObject() then @_normalizeObject(part)\n        else\n          throw new Error(\n            \"Type #{type_name} not supported.\n            Only String, Array and Object are supported.\"\n          )\n\n    denormalize: (part, sObject) =>\n      type_name = Object.prototype.toString.call(part)\n\n      switch\n        when _(part).isString() then @_denormalizeString(part, sObject)\n        when _(part).isArray()  then @_denormalizeArray(part, sObject)\n        when _(part).isObject() then @_denormalizeObject(part, sObject)\n        else\n          throw new Error(\n            \"Type #{type_name} not supported.\n            Only String, Array and Object are supported.\"\n          )\n\n    denormalizeObjectName: (name) =>\n      @_denormalize name, @standardObjects\n\n    # PRIVATE ----------\n\n    _normalizeString: (string) ->\n      string.toLowerCase().replace(/__c$/, '')\n\n    _normalizeArray: (array) =>\n      _.map array, (element) =>\n        @normalize(element)\n\n    _normalizeObject: (object) =>\n      normalized = {}\n\n      _(object).forEach (value, key) =>\n        if _(value).isObject() && !_(value).isFunction()\n          normalized[@normalize(key)] = @normalize(value)\n        else\n          normalized[@normalize(key)] = value\n\n      normalized\n\n    _denormalize: (part, avoidList) ->\n      unless _(avoidList).contains(part)\n        \"#{part}__c\"\n      else\n        part\n\n    _denormalizeString: (string, sObject) =>\n      sObject = @normalize(sObject)\n\n      standardFields = @standardFields\n      if _(@sObjectFields).has(sObject)\n        standardFields = _.uniq(standardFields.concat(@sObjectFields[sObject]))\n\n      @_denormalize string, standardFields\n\n    _denormalizeArray: (array, sObject) =>\n      _.map array, (element) =>\n        @denormalize(element, sObject)\n\n    _denormalizeObject: (object, sObject) =>\n      denormalized = {}\n\n      _(object).forEach (value, key) =>\n        if _(value).isObject() && !_(value).isFunction()\n          denormalized[@denormalize(key, sObject)] = @denormalize(\n            value, sObject\n          )\n        else\n          denormalized[@denormalize(key, sObject)] = value\n\n      denormalized\n","'use strict';\nvar NormalizeSalesforce,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nangular.module('angular-normalize-salesforce').service('normalizeSalesforce', NormalizeSalesforce = (function() {\n  function NormalizeSalesforce(ansSalesforceSObjects, ansSalesforceStandardObjects, ansSalesforceStandardFields) {\n    this._denormalizeObject = __bind(this._denormalizeObject, this);\n    this._denormalizeArray = __bind(this._denormalizeArray, this);\n    this._denormalizeString = __bind(this._denormalizeString, this);\n    this._normalizeObject = __bind(this._normalizeObject, this);\n    this._normalizeArray = __bind(this._normalizeArray, this);\n    this.denormalizeObjectName = __bind(this.denormalizeObjectName, this);\n    this.denormalize = __bind(this.denormalize, this);\n    this.normalize = __bind(this.normalize, this);\n    this.standardFields = ansSalesforceStandardFields;\n    this.standardObjects = ansSalesforceStandardObjects;\n    this.sObjectFields = ansSalesforceSObjects;\n  }\n\n  NormalizeSalesforce.prototype.normalize = function(part) {\n    var type_name;\n    type_name = Object.prototype.toString.call(part);\n    switch (false) {\n      case !_(part).isString():\n        return this._normalizeString(part);\n      case !_(part).isArray():\n        return this._normalizeArray(part);\n      case !_(part).isObject():\n        return this._normalizeObject(part);\n      default:\n        throw new Error(\"Type \" + type_name + \" not supported. Only String, Array and Object are supported.\");\n    }\n  };\n\n  NormalizeSalesforce.prototype.denormalize = function(part, sObject) {\n    var type_name;\n    type_name = Object.prototype.toString.call(part);\n    switch (false) {\n      case !_(part).isString():\n        return this._denormalizeString(part, sObject);\n      case !_(part).isArray():\n        return this._denormalizeArray(part, sObject);\n      case !_(part).isObject():\n        return this._denormalizeObject(part, sObject);\n      default:\n        throw new Error(\"Type \" + type_name + \" not supported. Only String, Array and Object are supported.\");\n    }\n  };\n\n  NormalizeSalesforce.prototype.denormalizeObjectName = function(name) {\n    return this._denormalize(name, this.standardObjects);\n  };\n\n  NormalizeSalesforce.prototype._normalizeString = function(string) {\n    return string.toLowerCase().replace(/__c$/, '');\n  };\n\n  NormalizeSalesforce.prototype._normalizeArray = function(array) {\n    return _.map(array, (function(_this) {\n      return function(element) {\n        return _this.normalize(element);\n      };\n    })(this));\n  };\n\n  NormalizeSalesforce.prototype._normalizeObject = function(object) {\n    var normalized;\n    normalized = {};\n    _(object).forEach((function(_this) {\n      return function(value, key) {\n        if (_(value).isObject() && !_(value).isFunction()) {\n          return normalized[_this.normalize(key)] = _this.normalize(value);\n        } else {\n          return normalized[_this.normalize(key)] = value;\n        }\n      };\n    })(this));\n    return normalized;\n  };\n\n  NormalizeSalesforce.prototype._denormalize = function(part, avoidList) {\n    if (!_(avoidList).contains(part)) {\n      return \"\" + part + \"__c\";\n    } else {\n      return part;\n    }\n  };\n\n  NormalizeSalesforce.prototype._denormalizeString = function(string, sObject) {\n    var standardFields;\n    sObject = this.normalize(sObject);\n    standardFields = this.standardFields;\n    if (_(this.sObjectFields).has(sObject)) {\n      standardFields = _.uniq(standardFields.concat(this.sObjectFields[sObject]));\n    }\n    return this._denormalize(string, standardFields);\n  };\n\n  NormalizeSalesforce.prototype._denormalizeArray = function(array, sObject) {\n    return _.map(array, (function(_this) {\n      return function(element) {\n        return _this.denormalize(element, sObject);\n      };\n    })(this));\n  };\n\n  NormalizeSalesforce.prototype._denormalizeObject = function(object, sObject) {\n    var denormalized;\n    denormalized = {};\n    _(object).forEach((function(_this) {\n      return function(value, key) {\n        if (_(value).isObject() && !_(value).isFunction()) {\n          return denormalized[_this.denormalize(key, sObject)] = _this.denormalize(value, sObject);\n        } else {\n          return denormalized[_this.denormalize(key, sObject)] = value;\n        }\n      };\n    })(this));\n    return denormalized;\n  };\n\n  return NormalizeSalesforce;\n\n})());\n"],"sourceRoot":"/source/"}